// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.2 effective-5.10 (swiftlang-6.2.0.19.9 clang-1700.3.19.1)
// swift-module-flags: -target arm64-apple-ios16.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -enable-upcoming-feature ConciseMagicFile -enable-upcoming-feature ForwardTrailingClosures -enable-upcoming-feature DeprecateApplicationMain -enable-upcoming-feature ImportObjcForwardDeclarations -enable-upcoming-feature DisableOutwardActorInference -enable-upcoming-feature IsolatedDefaultValues -enable-upcoming-feature GlobalConcurrency -enable-upcoming-feature InferSendableFromCaptures -enable-upcoming-feature ImplicitOpenExistentials -enable-upcoming-feature ExistentialAny -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name EdgeCore
// swift-module-flags-ignorable: -no-verify-emitted-module-interface -formal-cxx-interoperability-mode=off -interface-compiler-version 6.2
import AVFoundation
import Alamofire
import AppAuth
import Combine
import Foundation
import JWTDecode
import Swift
import SwiftUI
import SwiftyJSON
import UIKit
import UniformTypeIdentifiers
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os.log
import os
extension EdgeCore.ClientLibrary.AI.Model {
  public struct CompletionResponse : Swift.Codable, Swift.Sendable, Swift.Hashable, EdgeCore.ClientLibrary.AI.AssistantOutput {
    public var id: Swift.String?
    public var object: Swift.String?
    public var created: Swift.Int?
    public var model: Swift.String?
    public var systemFingerprint: Swift.String?
    public var choices: [EdgeCore.ClientLibrary.AI.Model.Choice]?
    public var usage: EdgeCore.ClientLibrary.AI.Model.Usage?
    #if compiler(>=5.3) && $NonescapableTypes
    public init(id: Swift.String? = nil, object: Swift.String? = nil, created: Swift.Int? = nil, model: Swift.String? = nil, systemFingerprint: Swift.String? = nil, choices: [EdgeCore.ClientLibrary.AI.Model.Choice]? = nil, usage: EdgeCore.ClientLibrary.AI.Model.Usage? = nil)
    #endif
    #if compiler(>=5.3) && $NonescapableTypes
    public func contentMessage() -> EdgeCore.ClientLibrary.AI.Model.Message?
    #endif
    #if compiler(>=5.3) && $NonescapableTypes
    public func contentText() -> Swift.String?
    #endif
    public func role() -> Swift.String
    public func finished() -> Swift.Bool
    public func assistantOutput() -> EdgeCore.ClientLibrary.AI.Model.CompletionResponse
    public func assistantOutputMessage() -> EdgeCore.ClientLibrary.AI.Model.Message
    public static func == (a: EdgeCore.ClientLibrary.AI.Model.CompletionResponse, b: EdgeCore.ClientLibrary.AI.Model.CompletionResponse) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.ClientLibrary {
  public struct Node : Swift.Codable, Swift.Sendable {
    public var id: Swift.String?
    public var name: Swift.String?
    public var accountId: Swift.String?
    public var os: Swift.String?
    public var url: Swift.String?
    public var routing: EdgeCore.ClientLibrary.Node.Routing?
    public var avatar: Swift.String?
    public var description: Swift.String {
      get
    }
    @_Concurrency.MainActor public static func preferredNodeName() -> Swift.String
    #if compiler(>=5.3) && $NonescapableTypes
    public func effectiveUrl() -> Foundation.URL?
    #endif
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.ClientLibrary {
  public static func integrateAIService(accessToken: Swift.String, apiKey: Swift.String, useCase source: EdgeCore.ClientLibrary.UseCase.ConfigurationSource, requestHandler: @escaping (Alamofire.DataStreamRequest) -> Swift.Void = { _ in }) async throws -> EdgeCore.ClientLibrary.AI.ServiceIntegration
  public static func deleteAIModel(id: Swift.String, accessToken: Swift.String, apiKey: Swift.String, useCase: EdgeCore.ClientLibrary.UseCase) async throws -> EdgeCore.ClientLibrary.AI.Model.DeleteModelResponseData
}
extension EdgeCore.ClientLibrary.Request {
  public static func call<T>(config: EdgeCore.ClientLibrary.Request.Config, type: T.Type) async throws -> T where T : Swift.Decodable, T : Swift.Encodable
  public static func call(config: EdgeCore.ClientLibrary.Request.Config) async throws -> SwiftyJSON.JSON
}
extension EdgeCore.ClientLibrary.Request {
  #if compiler(>=5.3) && $NonescapableTypes
  public static func decode<T>(_ type: T.Type, from data: Foundation.Data) -> (decodableObj: T?, error: (any Swift.Error)?) where T : Swift.Decodable
  #endif
}
extension EdgeCore.ClientLibrary.AI {
  public protocol ServiceInterface : Combine.ObservableObject, EdgeCore.ClientLibrary.AI.AssistantModels, EdgeCore.ClientLibrary.AI.AssistantPrompt {
    var configuration: EdgeCore.ClientLibrary.AI.ServiceConfiguration { get }
  }
  public protocol AssistantPrompt {
    func assistantPrompt(prompt: EdgeCore.ClientLibrary.AI.Model.Message) async throws -> EdgeCore.ClientLibrary.AI.CancellableStream<EdgeCore.ClientLibrary.AI.Model.CompletionResponse>
    #if compiler(>=5.3) && $NonescapableTypes
    func assistantVisionPrompt(prompt: EdgeCore.ClientLibrary.AI.Model.Message, image: UIKit.UIImage, resizeImgOptions: EdgeCore.ClientLibrary.ImageResizeOptions?) async throws -> EdgeCore.ClientLibrary.AI.CancellableStream<EdgeCore.ClientLibrary.AI.Model.CompletionResponse>
    #endif
  }
  public enum DownloadAIEvent {
    case request(Alamofire.DataStreamRequest)
    case progress(EdgeCore.ClientLibrary.AI.Model.DownloadProgress)
    case completed(EdgeCore.ClientLibrary.AI.Model)
  }
  public protocol AssistantModels {
    func availableModels() async throws -> [EdgeCore.ClientLibrary.AI.Model]
    func availableModelsMessage() async throws -> EdgeCore.ClientLibrary.AI.Model.Message
    func downloadAI(model: EdgeCore.ClientLibrary.AI.Model.CreateModelRequest, accessToken: Swift.String, apiKey: Swift.String, useCase: EdgeCore.ClientLibrary.UseCase) async -> EdgeCore.ClientLibrary.AI.CancellableStream<EdgeCore.ClientLibrary.AI.DownloadAIEvent>
  }
  public protocol AssistantOutput {
    func assistantOutput() -> EdgeCore.ClientLibrary.AI.Model.CompletionResponse
  }
  public struct CancellableStream<T> {
    public let stream: _Concurrency.AsyncThrowingStream<T, any Swift.Error>
    public let cancel: () -> Swift.Void
  }
}
extension EdgeCore.ClientLibrary.AI {
  public class HybridClient : EdgeCore.ClientLibrary.AI.ServiceInterface {
    final public let configuration: EdgeCore.ClientLibrary.AI.ServiceConfiguration
    public init(configuration: EdgeCore.ClientLibrary.AI.ServiceConfiguration)
    #if compiler(>=5.3) && $NonescapableTypes
    public func assistantVisionPrompt(prompt: EdgeCore.ClientLibrary.AI.Model.Message, image: UIKit.UIImage, resizeImgOptions: EdgeCore.ClientLibrary.ImageResizeOptions?) async throws -> EdgeCore.ClientLibrary.AI.CancellableStream<EdgeCore.ClientLibrary.AI.Model.CompletionResponse>
    #endif
    public func assistantPrompt(prompt: EdgeCore.ClientLibrary.AI.Model.Message) async throws -> EdgeCore.ClientLibrary.AI.CancellableStream<EdgeCore.ClientLibrary.AI.Model.CompletionResponse>
    public func availableModels() async throws -> [EdgeCore.ClientLibrary.AI.Model]
    public func availableModelsMessage() async throws -> EdgeCore.ClientLibrary.AI.Model.Message
    public func downloadAI(model: EdgeCore.ClientLibrary.AI.Model.CreateModelRequest, accessToken: Swift.String, apiKey: Swift.String, useCase: EdgeCore.ClientLibrary.UseCase) async -> EdgeCore.ClientLibrary.AI.CancellableStream<EdgeCore.ClientLibrary.AI.DownloadAIEvent>
    public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
    @objc deinit
  }
}
extension EdgeCore.ClientLibrary.AI.ServiceConfiguration {
  public struct Endpoint : Swift.Identifiable, Swift.Hashable {
    public let baseURL: Swift.String
    public let apiKey: Swift.String?
    public let modelEndpoint: Swift.String
    public let chatEndpoint: Swift.String?
    public let headers: Alamofire.HTTPHeaders
    public let separators: Swift.String
    public let modelId: Swift.String?
    public var id: Swift.String {
      get
    }
    #if compiler(>=5.3) && $NonescapableTypes
    public init(baseURL: Swift.String, apiKey: Swift.String?, modelEndpoint: Swift.String, chatEndpoint: Swift.String?, headers: Alamofire.HTTPHeaders, separators: Swift.String, modelId: Swift.String?)
    #endif
    public static func == (a: EdgeCore.ClientLibrary.AI.ServiceConfiguration.Endpoint, b: EdgeCore.ClientLibrary.AI.ServiceConfiguration.Endpoint) -> Swift.Bool
    public typealias ID = Swift.String
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension EdgeCore.DeveloperConsole {
  @_Concurrency.MainActor @preconcurrency public struct AuthenticationView : SwiftUICore.View {
    public struct AppInfo {
      public let name: Swift.String
      public let logoName: Swift.String
      public let footer: Swift.String
      public init(name: Swift.String, logoName: Swift.String, footer: Swift.String)
    }
    #if compiler(>=5.3) && $NonescapableTypes
    @_Concurrency.MainActor @preconcurrency public init(appInfo: EdgeCore.DeveloperConsole.AuthenticationView.AppInfo, onSuccess: ((EdgeCore.DeveloperConsole.Session) -> Swift.Void)? = nil, onError: ((Foundation.NSError) -> Swift.Void)? = nil)
    #endif
    @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
      get
    }
    public typealias Body = @_opaqueReturnTypeOf("$s8EdgeCore16DeveloperConsoleC18AuthenticationViewV4bodyQrvp", 0) __
  }
}
extension EdgeCore.ClientLibrary.Microservice {
  public struct NewImage : Swift.Codable, Swift.Sendable {
    public var url: Swift.String?
    public var base64Image: Swift.String?
    #if compiler(>=5.3) && $NonescapableTypes
    public init(url: Swift.String?, base64Image: Swift.String?)
    #endif
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.ClientLibrary.AI.Model {
  public struct DeleteModelResponseData : Swift.Codable, Swift.Sendable, Swift.Hashable {
    public var data: EdgeCore.ClientLibrary.AI.Model.DeleteModelResponse?
    #if compiler(>=5.3) && $NonescapableTypes
    public init(data: EdgeCore.ClientLibrary.AI.Model.DeleteModelResponse? = nil)
    #endif
    public static func == (a: EdgeCore.ClientLibrary.AI.Model.DeleteModelResponseData, b: EdgeCore.ClientLibrary.AI.Model.DeleteModelResponseData) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct DeleteModelResponse : Swift.Codable, Swift.Sendable, Swift.Hashable {
    public enum Object : Swift.String, Swift.Codable, Swift.Sendable, Swift.Hashable {
      case model
      #if compiler(>=5.3) && $NonescapableTypes
      public init?(rawValue: Swift.String)
      #endif
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public var id: Swift.String?
    public var object: EdgeCore.ClientLibrary.AI.Model.DeleteModelResponse.Object?
    public var deleted: Swift.Bool?
    #if compiler(>=5.3) && $NonescapableTypes
    public init(id: Swift.String? = nil, object: EdgeCore.ClientLibrary.AI.Model.DeleteModelResponse.Object? = nil, deleted: Swift.Bool? = nil)
    #endif
    public static func == (a: EdgeCore.ClientLibrary.AI.Model.DeleteModelResponse, b: EdgeCore.ClientLibrary.AI.Model.DeleteModelResponse) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.ClientLibrary.Authorization {
  public struct ValidationCodes : Swift.Codable, Swift.Sendable {
    public var mfaCode: Swift.String? {
      get
    }
    public var oobCode: Swift.String? {
      get
    }
    public var bindingCode: Swift.String? {
      get
    }
    #if compiler(>=5.3) && $NonescapableTypes
    public init(mfaCode: Swift.String?, oobCode: Swift.String?, bindingCode: Swift.String?)
    #endif
    public var description: Swift.String {
      get
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.ClientLibrary.AI.Model {
  public struct ChatRequest : Swift.Codable, Swift.Sendable {
    public let modelId: Swift.String
    public let accessToken: Swift.String
    public let apiKey: Swift.String
    public let prompt: EdgeCore.ClientLibrary.AI.Model.Message
    public let useCase: EdgeCore.ClientLibrary.UseCase
    public let context: [EdgeCore.ClientLibrary.AI.Model.Message]?
    public var temperature: Swift.Float
    #if compiler(>=5.3) && $NonescapableTypes
    public init(modelId: Swift.String, accessToken: Swift.String, apiKey: Swift.String, prompt: EdgeCore.ClientLibrary.AI.Model.Message, useCase: EdgeCore.ClientLibrary.UseCase, context: [EdgeCore.ClientLibrary.AI.Model.Message]? = nil, temperature: Swift.Float? = nil)
    #endif
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.ClientLibrary {
  public static func authorizeUserAccess(authorization: EdgeCore.ClientLibrary.Authorization, service: EdgeCore.ClientLibrary.Service) async throws -> EdgeCore.ClientLibrary.Authorization
  public static func authorizeUserAccess(federatedToken: Swift.String, policyId: Swift.String, idToken: Swift.String, service: EdgeCore.ClientLibrary.Service) async throws -> EdgeCore.ClientLibrary.Authorization
}
extension EdgeCore.ClientLibrary {
  public struct Service : Swift.Codable, Swift.Sendable {
    public var rootUrl: Foundation.URL
    public var basePath: Swift.String?
    public var clientId: Swift.String?
    public var expectedVersion: Swift.String?
    public var healthCheckPath: Swift.String?
    public var scope: [Swift.String]?
    #if compiler(>=5.3) && $NonescapableTypes
    public init(rootUrl: Foundation.URL, basePath: Swift.String? = nil, clientId: Swift.String? = nil, expectedVersion: Swift.String? = nil, healthCheckPath: Swift.String? = nil, scope: [Swift.String]? = [])
    #endif
    public func healthCheck() async throws -> EdgeCore.ClientLibrary.Service.HealthCheck
    public func versionCheck(requireMatch: Swift.Bool = false) async throws -> EdgeCore.ClientLibrary.Service.VersionCheck
    #if compiler(>=5.3) && $NonescapableTypes
    public func urlComponents() -> Foundation.URLComponents?
    #endif
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.ClientLibrary.Node {
  public struct Routing : Swift.Codable, Swift.Sendable {
    public var id: Swift.String?
    public var port: Swift.Int64?
    public var url: Swift.String?
    public var description: Swift.String {
      get
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.DeveloperConsole {
  public struct AppRegistration : Swift.Codable, Swift.Sendable {
    public let clientName: Swift.String
    public let clientId: Swift.String
    public let redirectUris: [Swift.String]
    public let grantTypes: [Swift.String]
    public let applicationType: Swift.String
    public let logoUri: Swift.String?
    public var description: Swift.String {
      get
    }
    public func idToken(accessToken: Swift.String, expiresIn: Swift.Int = 2_592_000) async throws -> Swift.String
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.ClientLibrary.Microservice {
  public struct ImageData : Swift.Codable, Swift.Sendable {
    public var data: [EdgeCore.ClientLibrary.Microservice.Image]?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Image : Swift.Codable, Swift.Sendable {
    public var id: Swift.String?
    public var name: Swift.String?
    public var repoDigests: [Swift.String]?
    public var created: Swift.Int?
    public var size: Swift.Int?
    public var containers: Swift.Int?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.ClientLibrary.AI.Model {
  public struct ModelsResponse : Swift.Codable, Swift.Sendable, Swift.Hashable {
    public enum Object : Swift.String, Swift.Codable, Swift.Sendable, Swift.Hashable {
      case list
      #if compiler(>=5.3) && $NonescapableTypes
      public init?(rawValue: Swift.String)
      #endif
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public var object: EdgeCore.ClientLibrary.AI.Model.ModelsResponse.Object?
    public var data: [EdgeCore.ClientLibrary.AI.Model]?
    #if compiler(>=5.3) && $NonescapableTypes
    public init(object: EdgeCore.ClientLibrary.AI.Model.ModelsResponse.Object? = nil, data: [EdgeCore.ClientLibrary.AI.Model]? = nil)
    #endif
    public static func == (a: EdgeCore.ClientLibrary.AI.Model.ModelsResponse, b: EdgeCore.ClientLibrary.AI.Model.ModelsResponse) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.ClientLibrary.Microservice {
  public struct Config : Swift.Codable, Swift.Sendable {
    public var imageName: Swift.String
    public var containerName: Swift.String
    public var basePath: Swift.String
    public var envVariables: [Swift.String : Swift.String]
    public init(imageName: Swift.String, containerName: Swift.String, basePath: Swift.String, envVariables: [Swift.String : Swift.String])
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.ClientLibrary.Microservice {
  public struct ContainerData : Swift.Codable, Swift.Sendable {
    public var data: [EdgeCore.ClientLibrary.Microservice.Container]?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Container : Swift.Codable, Swift.Sendable {
    public enum State : Swift.String, Swift.Codable, Swift.Sendable {
      case created
      case running
      case removing
      case paused
      case started
      #if compiler(>=5.3) && $NonescapableTypes
      public init?(rawValue: Swift.String)
      #endif
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public var id: Swift.String?
    public var image: Swift.String?
    public var imageId: Swift.String?
    public var created: Swift.Int?
    public var state: EdgeCore.ClientLibrary.Microservice.Container.State?
    public var env: [Swift.String : Swift.String]?
    public var name: Swift.String?
    public var clientId: Swift.String?
    #if compiler(>=5.3) && $NonescapableTypes
    public func basePath() -> Swift.String?
    #endif
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.ClientLibrary {
  public struct UseCase : Swift.Codable, Swift.Sendable {
    public enum ConfigurationSource {
      case inline(EdgeCore.ClientLibrary.UseCase)
      case remote(Foundation.URL)
    }
    public let name: Swift.String?
    public let bundled: Swift.Bool?
    public let version: Swift.String?
    public let features: [EdgeCore.ClientLibrary.UseCase.Feature]?
    public let microservices: [EdgeCore.ClientLibrary.UseCase.Config]?
    public var deployedMicroservices: [EdgeCore.ClientLibrary.Microservice]?
    #if compiler(>=5.3) && $NonescapableTypes
    public init(name: Swift.String?, bundled: Swift.Bool?, version: Swift.String?, features: [EdgeCore.ClientLibrary.UseCase.Feature]?, microservices: [EdgeCore.ClientLibrary.UseCase.Config]?, deployedMicroservices: [EdgeCore.ClientLibrary.Microservice]? = nil)
    #endif
    public struct Feature : Swift.Codable, Swift.Sendable {
      public let signature: Swift.String
      public let endpoint: Swift.String
      public let service: Swift.String
      public let httpMethod: Swift.String
      public let description: Swift.String?
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Config : Swift.Codable, Swift.Sendable {
      public let name: Swift.String?
      public let serviceVersion: Swift.String?
      public let tarUrl: Swift.String?
      public let shouldDeploy: Swift.Bool?
      public let environment: EdgeCore.ClientLibrary.UseCase.Config.Environment?
      public let swagger: EdgeCore.ClientLibrary.UseCase.Config.Swagger?
      public struct Environment : Swift.Codable, Swift.Sendable {
        public let name: Swift.String?
        public let basePath: Swift.String?
        public let staticEnvValues: [EdgeCore.ClientLibrary.UseCase.Config.Environment.Static]?
        public let dynamicEnvValues: [EdgeCore.ClientLibrary.UseCase.Config.Environment.Dynamic]?
        public struct Static : Swift.Codable, Swift.Sendable {
          public let name: Swift.String?
          public let value: Swift.String?
          public func encode(to encoder: any Swift.Encoder) throws
          public init(from decoder: any Swift.Decoder) throws
        }
        public struct Dynamic : Swift.Codable, Swift.Sendable {
          public let name: Swift.String?
          public func encode(to encoder: any Swift.Encoder) throws
          public init(from decoder: any Swift.Decoder) throws
        }
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public struct Swagger : Swift.Codable, Swift.Sendable {
        public let swagger: EdgeCore.ClientLibrary.JSONValue?
        public let basePath: EdgeCore.ClientLibrary.JSONValue?
        public let info: EdgeCore.ClientLibrary.JSONValue?
        public let schemes: EdgeCore.ClientLibrary.JSONValue?
        public let produces: EdgeCore.ClientLibrary.JSONValue?
        public let paths: EdgeCore.ClientLibrary.JSONValue?
        public let securityDefinitions: EdgeCore.ClientLibrary.JSONValue?
        public let definitions: EdgeCore.ClientLibrary.JSONValue?
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.ClientLibrary.Microservice {
  #if compiler(>=5.3) && $NonescapableTypes
  public static func preferredConfig(imageName: Swift.String, containerName: Swift.String, basePath: Swift.String, runtimeFullPathUrl: Foundation.URLComponents, clientId: Swift.String, envVariables: [Swift.String : Swift.String]? = nil, signatureKey: Swift.String? = nil, ownerCode: Swift.String? = nil) -> EdgeCore.ClientLibrary.Microservice.Config?
  #endif
  public static func expectedDeployedImageId(imageName: Swift.String, clientId: Swift.String) -> Swift.String
  public static func expectedDeployedContainerId(containerName: Swift.String, clientId: Swift.String) -> Swift.String
  public static func expectedDeployedBasePath(path: Swift.String, clientId: Swift.String) -> Swift.String
  public static func preferredImageName(name: Swift.String) -> Swift.String
  public static func preferredContainerName(name: Swift.String) -> Swift.String
  public static func preferredBasePath(path: Swift.String) -> Swift.String
}
public typealias EdgeClient = EdgeCore.ClientLibrary
@_hasMissingDesignatedInitializers public actor ClientLibrary {
  public static func setLoggingLevel(module: EdgeCore.ClientLibrary.Log.Module, level: EdgeCore.ClientLibrary.Log.Level, privacy: EdgeCore.ClientLibrary.Log.Privacy, marker: Swift.String = "")
  public static func activateExternalRuntime(host: Swift.String, port: Swift.Int) throws -> Foundation.URLComponents
  public static func externalRuntimeIsActivated() -> Swift.Bool
  public static func deactivateExternalRuntime() throws
  public static func deployMicroservice(accessToken: Swift.String, config: EdgeCore.ClientLibrary.Microservice.Config, imageTarPath: Swift.String) async throws -> EdgeCore.ClientLibrary.Microservice
  public static func deployImage(accessToken: Swift.String, imageTarPath: Swift.String) async throws -> EdgeCore.ClientLibrary.Microservice.NewImage
  public static func deployContainer(accessToken: Swift.String, config: EdgeCore.ClientLibrary.Microservice.Config) async throws -> EdgeCore.ClientLibrary.Microservice.NewContainer
  public static func deployUseCase(accessToken: Swift.String, configUrl: Swift.String, dynamicConfig: [EdgeCore.ClientLibrary.Microservice.DynamicConfig]) async throws -> EdgeCore.ClientLibrary.UseCase
  public static func deployUseCase(accessToken: Swift.String, config: EdgeCore.ClientLibrary.UseCase, dynamicConfig: [EdgeCore.ClientLibrary.Microservice.DynamicConfig]) async throws -> EdgeCore.ClientLibrary.UseCase
  public static func undeployMicroservice(accessToken: Swift.String, microservice: EdgeCore.ClientLibrary.Microservice) async throws
  public static func microservices(accessToken: Swift.String) async throws -> [EdgeCore.ClientLibrary.Microservice]
  public static func microservice(containerName: Swift.String, accessToken: Swift.String) async throws -> EdgeCore.ClientLibrary.Microservice
  public static func runtimeIdToken() async throws -> Swift.String
  public static func runtimeInfo() async throws -> SwiftyJSON.JSON
  public static func runtimeIsRunning() async -> Swift.Bool
  #if compiler(>=5.3) && $NonescapableTypes
  public static func runtimeWorkingDirectory() -> Foundation.URL?
  #endif
  public static func externalRuntimeIsRunning() async -> Swift.Bool
  public static func runtimeFullPathUrl() -> Foundation.URLComponents
  @objc deinit
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  @_semantics("defaultActor") nonisolated final public var unownedExecutor: _Concurrency.UnownedSerialExecutor {
    get
  }
}
extension EdgeCore.ClientLibrary {
  public enum JSONValue : Swift.Codable, Swift.Equatable, Swift.Sendable, Swift.Hashable {
    case string(Swift.String)
    case integer(Swift.Int)
    case double(Swift.Double)
    case bool(Swift.Bool)
    case object([Swift.String : EdgeCore.ClientLibrary.JSONValue])
    case array([EdgeCore.ClientLibrary.JSONValue])
    case null
    public init(from decoder: any Swift.Decoder) throws
    public static func == (a: EdgeCore.ClientLibrary.JSONValue, b: EdgeCore.ClientLibrary.JSONValue) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension EdgeCore.ClientLibrary.AI {
  public struct ServiceIntegration {
    public var service: EdgeCore.ClientLibrary.AI.ServiceConfiguration
    public var useCase: EdgeCore.ClientLibrary.UseCase
  }
  public struct ServiceConfiguration : Swift.Identifiable, Swift.Hashable {
    public let kind: EdgeCore.ClientLibrary.AI.ServiceConfiguration.Kind
    public let model: EdgeCore.ClientLibrary.AI.Model?
    public let apiKey: Swift.String?
    public let mimOEPort: Swift.Int?
    public let mimOEClientId: Swift.String?
    #if compiler(>=5.3) && $NonescapableTypes
    public init(kind: EdgeCore.ClientLibrary.AI.ServiceConfiguration.Kind, model: EdgeCore.ClientLibrary.AI.Model?, apiKey: Swift.String?, mimOEPort: Swift.Int?, mimOEClientId: Swift.String?)
    #endif
    public enum Kind : Swift.String {
      case gemini
      case mimikAI
      #if compiler(>=5.3) && $NonescapableTypes
      public init?(rawValue: Swift.String)
      #endif
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public var id: Swift.String {
      get
    }
    #if compiler(>=5.3) && $NonescapableTypes
    public var modelId: Swift.String? {
      get
    }
    #endif
    #if compiler(>=5.3) && $NonescapableTypes
    public func endpoint() -> EdgeCore.ClientLibrary.AI.ServiceConfiguration.Endpoint?
    #endif
    public static func == (a: EdgeCore.ClientLibrary.AI.ServiceConfiguration, b: EdgeCore.ClientLibrary.AI.ServiceConfiguration) -> Swift.Bool
    public typealias ID = Swift.String
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension Swift.Array where Element == EdgeCore.ClientLibrary.AI.ServiceConfiguration {
  public mutating func addOrReplace(_ newConfig: Element)
}
extension EdgeCore.ClientLibrary {
  public static func authorizeUser(email: Swift.String, password: Swift.String, idToken: Swift.String, service: EdgeCore.ClientLibrary.Service) async throws -> EdgeCore.ClientLibrary.Authorization
}
extension Swift.Encodable {
  public func prettyPrinted() -> Swift.String
  #if compiler(>=5.3) && $NonescapableTypes
  public var dictionary: [Swift.String : any Swift.Sendable]? {
    get
  }
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public func json() -> SwiftyJSON.JSON?
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public func jsonString() -> Swift.String?
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public func jsonData() -> Foundation.Data?
  #endif
  public func encoded() throws -> Foundation.Data
}
extension EdgeCore.ClientLibrary {
  public struct Microservice : Swift.Codable, Swift.Sendable {
    public enum Component : Swift.String, Swift.Codable, Swift.Sendable {
      case image
      case container
      #if compiler(>=5.3) && $NonescapableTypes
      public init?(rawValue: Swift.String)
      #endif
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public var container: EdgeCore.ClientLibrary.Microservice.Container?
    public var image: EdgeCore.ClientLibrary.Microservice.Image?
    public init(image: EdgeCore.ClientLibrary.Microservice.Image, container: EdgeCore.ClientLibrary.Microservice.Container)
    public struct DynamicConfig : Swift.Codable, Swift.Sendable {
      public var name: Swift.String
      public var values: [Swift.String : Swift.String]
      public init(name: Swift.String, values: [Swift.String : Swift.String])
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    #if compiler(>=5.3) && $NonescapableTypes
    public func urlComponents() -> Foundation.URLComponents?
    #endif
    #if compiler(>=5.3) && $NonescapableTypes
    public func urlComponents(withEndpoint endpoint: Swift.String) -> Foundation.URLComponents?
    #endif
    #if compiler(>=5.3) && $NonescapableTypes
    public func basePath() -> Swift.String?
    #endif
    public func updateEnv(accessToken: Swift.String, envVariables: [Swift.String : Swift.String]) async throws -> EdgeCore.ClientLibrary.Microservice
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.ClientLibrary {
  @_hasMissingDesignatedInitializers public actor AI {
    @objc deinit
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    @_semantics("defaultActor") nonisolated final public var unownedExecutor: _Concurrency.UnownedSerialExecutor {
      get
    }
  }
}
extension EdgeCore.ClientLibrary.Microservice {
  public struct Request : Swift.Codable, Swift.Sendable {
    public struct Config : Swift.Sendable {
      public let path: Swift.String
      public let method: Alamofire.HTTPMethod
      public let queryItems: [Foundation.URLQueryItem]?
      public let authorization: EdgeCore.ClientLibrary.Authorization?
      public let httpBody: Alamofire.Parameters?
      public let httpHeaders: Alamofire.HTTPHeaders?
      public let dataKey: Swift.String?
      #if compiler(>=5.3) && $NonescapableTypes
      public init?(path: Swift.String, method: Alamofire.HTTPMethod, queryItems: [Foundation.URLQueryItem]?, authorization: EdgeCore.ClientLibrary.Authorization?, httpBody: Alamofire.Parameters?, httpHeaders: Alamofire.HTTPHeaders?, dataKey: Swift.String?)
      #endif
    }
    #if compiler(>=5.3) && $NonescapableTypes
    public static func microserviceRequest(microservice: EdgeCore.ClientLibrary.Microservice, path: Swift.String, method: Alamofire.HTTPMethod, queryItems: [Foundation.URLQueryItem]?, authorization: EdgeCore.ClientLibrary.Authorization?, httpBody: Alamofire.Parameters?, httpHeaders: Alamofire.HTTPHeaders? = nil, timeoutInterval: Foundation.TimeInterval? = nil, cachePolicy: Foundation.URLRequest.CachePolicy? = nil) throws -> Foundation.URLRequest
    #endif
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.ClientLibrary.AI.Model {
  public struct CompletionRequest : Swift.Codable, Swift.Sendable, Swift.Hashable {
    public var model: Swift.String
    public var messages: [EdgeCore.ClientLibrary.AI.Model.Message]
    public init(model: Swift.String, messages: [EdgeCore.ClientLibrary.AI.Model.Message])
    public static func == (a: EdgeCore.ClientLibrary.AI.Model.CompletionRequest, b: EdgeCore.ClientLibrary.AI.Model.CompletionRequest) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.ClientLibrary.AI.Model {
  public struct Message : Swift.Codable, Swift.Sendable, Swift.Hashable {
    public var role: Swift.String?
    public var content: Swift.String?
    public var thumbnailBase64: Swift.String?
    public var modelId: Swift.String?
    #if compiler(>=5.3) && $NonescapableTypes
    public init(role: Swift.String? = nil, content: Swift.String? = nil, thumbnailBase64: Swift.String? = nil, modelId: Swift.String? = nil)
    #endif
    public var isAiType: Swift.Bool {
      get
    }
    public var isUserType: Swift.Bool {
      get
    }
    public enum MessageType : Swift.Codable, Swift.Sendable, Swift.Hashable {
      case user
      case assistant
      case system
      case unknown
      public init(rawValue: Swift.String)
      public var isAiType: Swift.Bool {
        get
      }
      public var isUserType: Swift.Bool {
        get
      }
      public static func == (a: EdgeCore.ClientLibrary.AI.Model.Message.MessageType, b: EdgeCore.ClientLibrary.AI.Model.Message.MessageType) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public static func == (a: EdgeCore.ClientLibrary.AI.Model.Message, b: EdgeCore.ClientLibrary.AI.Model.Message) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.ClientLibrary.Service {
  public struct VersionCheck : Swift.Codable, Swift.Sendable {
    public enum Result : Swift.String, Swift.Codable, Swift.Sendable {
      case unknown
      case expected
      case unexpectedWarning
      case unexpectedFailure
      #if compiler(>=5.3) && $NonescapableTypes
      public init?(rawValue: Swift.String)
      #endif
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public let result: EdgeCore.ClientLibrary.Service.VersionCheck.Result
    public let message: Swift.String
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
@_hasMissingDesignatedInitializers public actor DeveloperConsole {
  @_hasMissingDesignatedInitializers public actor Auth {
    public static func authenticate(email: Swift.String, password: Swift.String) async throws -> EdgeCore.ClientLibrary.Authorization
    #if compiler(>=5.3) && $NonescapableTypes
    public static func authorizeRuntimeAccess(idToken: Swift.String, runtimeIdToken: Swift.String? = nil) async throws -> EdgeCore.ClientLibrary.Authorization
    #endif
    public static func signup(email: Swift.String, password: Swift.String) async throws -> EdgeCore.ClientLibrary.Authorization
    public static func verifySignup(codes: EdgeCore.ClientLibrary.Authorization.ValidationCodes, password: Swift.String) async throws -> EdgeCore.ClientLibrary.Authorization
    public static func requestPasswordReset(email: Swift.String) async throws -> EdgeCore.ClientLibrary.Authorization
    public static func verifyPasswordReset(codes: EdgeCore.ClientLibrary.Authorization.ValidationCodes, newPassword: Swift.String) async throws -> EdgeCore.ClientLibrary.Authorization
    public static func changePassword(email: Swift.String, currentPassword: Swift.String, newPassword: Swift.String) async throws -> EdgeCore.ClientLibrary.Authorization
    public static func listScopes(serverUrl: Foundation.URL) async throws -> [Swift.String]
    public static func issueToken(accessToken: Swift.String, clientId: Swift.String, expiresIn: Swift.Int = 2_592_000) async throws -> Swift.String
    public static func issueSharedToken(accessToken: Swift.String, clientId: Swift.String, expiresIn: Swift.Int = 2_592_000) async throws -> Swift.String
    @objc deinit
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    @_semantics("defaultActor") nonisolated final public var unownedExecutor: _Concurrency.UnownedSerialExecutor {
      get
    }
  }
  @_hasMissingDesignatedInitializers public actor Apps {
    public static func create(accessToken: Swift.String, payload: EdgeCore.DeveloperConsole.CreateAppRequest) async throws -> EdgeCore.DeveloperConsole.AppRegistration
    public static func list(accessToken: Swift.String) async throws -> [EdgeCore.DeveloperConsole.AppRegistration]
    #if compiler(>=5.3) && $NonescapableTypes
    public static func find(accessToken: Swift.String, name: Swift.String) async throws -> EdgeCore.DeveloperConsole.AppRegistration?
    #endif
    #if compiler(>=5.3) && $NonescapableTypes
    public static func find(accessToken: Swift.String, clientId: Swift.String) async throws -> EdgeCore.DeveloperConsole.AppRegistration?
    #endif
    public static func delete(accessToken: Swift.String, clientId: Swift.String) async throws -> Swift.String
    @objc deinit
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    @_semantics("defaultActor") nonisolated final public var unownedExecutor: _Concurrency.UnownedSerialExecutor {
      get
    }
  }
  public struct Session : Swift.Codable, Swift.Sendable {
    public let apps: [EdgeCore.DeveloperConsole.AppRegistration]
    public let authorization: EdgeCore.ClientLibrary.Authorization
    public init(apps: [EdgeCore.DeveloperConsole.AppRegistration], authorization: EdgeCore.ClientLibrary.Authorization)
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  @objc deinit
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  @_semantics("defaultActor") nonisolated final public var unownedExecutor: _Concurrency.UnownedSerialExecutor {
    get
  }
}
extension EdgeCore.ClientLibrary.AI.Model {
  public struct CreateModelRequest : Swift.Codable, Swift.Sendable, Swift.Hashable {
    public enum ChatTemplateHint : Swift.String, Swift.Codable, Swift.Sendable, Swift.Hashable {
      case chatml
      case llama2
      case llama2Sys
      case llama2SysBos
      case llama2SysStrip
      case mistralV1
      case mistralV3
      case mistralV3Tekken
      case mistralV7
      case phi3
      case falcon3
      case zephyr
      case monarch
      case gemma
      case orion
      case openchat
      case vicuna
      case vicunaOrca
      case deepseek
      case deepseek2
      case deepseek3
      case commandR
      case llama3
      case chatglm3
      case chatglm4
      case minicpm
      case exaone3
      case rwkvWorld
      case granite
      case gigachat
      case megrez
      #if compiler(>=5.3) && $NonescapableTypes
      public init?(rawValue: Swift.String)
      #endif
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public var id: Swift.String
    public var object: Swift.String
    public var kind: EdgeCore.ClientLibrary.AI.Model.Kind?
    public var chatTemplateHint: EdgeCore.ClientLibrary.AI.Model.CreateModelRequest.ChatTemplateHint?
    public var url: Swift.String
    public var mmprojUrl: Swift.String?
    public var ownedBy: Swift.String?
    public var expectedDownloadSize: Swift.Int64
    public var excludeFromBackup: Swift.Bool?
    #if compiler(>=5.3) && $NonescapableTypes
    public init(id: Swift.String, object: Swift.String, url: Swift.String, expectedDownloadSize: Swift.Int64, kind: EdgeCore.ClientLibrary.AI.Model.Kind? = .llm, chatTemplateHint: EdgeCore.ClientLibrary.AI.Model.CreateModelRequest.ChatTemplateHint? = nil, mmprojUrl: Swift.String? = nil, ownedBy: Swift.String? = nil, excludeFromBackup: Swift.Bool? = true)
    #endif
    public static func == (a: EdgeCore.ClientLibrary.AI.Model.CreateModelRequest, b: EdgeCore.ClientLibrary.AI.Model.CreateModelRequest) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.ClientLibrary.Microservice {
  #if compiler(>=5.3) && $NonescapableTypes
  public func call(config: EdgeCore.ClientLibrary.Microservice.Request.Config, requestHandler: ((_ request: Alamofire.DataTask<Foundation.Data>) -> Swift.Void)? = nil) async throws -> Foundation.Data
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public func call<T>(config: EdgeCore.ClientLibrary.Microservice.Request.Config, type: T.Type, requestHandler: ((_ request: Alamofire.DataTask<Foundation.Data>) -> Swift.Void)? = nil) async throws -> T where T : Swift.Decodable, T : Swift.Encodable
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public func callMultipartFormData(config: EdgeCore.ClientLibrary.Microservice.Request.Config, name: Swift.String, mimeType: Swift.String, data: Foundation.Data, requestHandler: ((_ request: Alamofire.DataTask<Foundation.Data>) -> Swift.Void)? = nil) async throws -> Foundation.Data
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public func callMultipartFormData<T>(config: EdgeCore.ClientLibrary.Microservice.Request.Config, name: Swift.String, mimeType: Swift.String, data: Foundation.Data, type: T.Type, requestHandler: ((_ request: Alamofire.DataTask<Foundation.Data>) -> Swift.Void)? = nil) async throws -> T where T : Swift.Decodable, T : Swift.Encodable
  #endif
}
extension EdgeCore.ClientLibrary.Microservice {
  public enum ServerSentEventType : Swift.Codable, Swift.Sendable {
    case empty
    case comment(Swift.String)
    case event(Swift.String)
    case data(Swift.String)
    case id(Swift.String)
    case retry(Swift.String)
    case other
    case unknown
    case error(Swift.String, Swift.Int)
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  #if compiler(>=5.3) && $NonescapableTypes
  public func callStreamSSE(config: EdgeCore.ClientLibrary.Microservice.Request.Config, streamHandler: @escaping (_ stream: Swift.Result<EdgeCore.ClientLibrary.Microservice.ServerSentEventType, Foundation.NSError>) -> Swift.Void, requestHandler: @escaping (_ request: Alamofire.DataStreamRequest) -> Swift.Void) async throws -> Alamofire.DataStreamRequest.Completion
  #endif
}
extension EdgeCore.ClientLibrary {
  public struct Log : Swift.Codable, Swift.Sendable {
    public enum Level : Swift.Int, Swift.Codable, Swift.Sendable {
      case debug
      case info
      case error
      case fault
      case off
      #if compiler(>=5.3) && $NonescapableTypes
      public init?(rawValue: Swift.Int)
      #endif
      public typealias RawValue = Swift.Int
      public var rawValue: Swift.Int {
        get
      }
    }
    public enum Privacy : Swift.Int, Swift.Codable, Swift.Sendable {
      case privateOnly
      case publicAccess
      #if compiler(>=5.3) && $NonescapableTypes
      public init?(rawValue: Swift.Int)
      #endif
      public typealias RawValue = Swift.Int
      public var rawValue: Swift.Int {
        get
      }
    }
    public enum Module : Swift.Codable, Swift.Sendable {
      case custom(Swift.String)
      case mimikCore
      case mimikRuntime
      case mimikService
      case mimikApps
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public static func loggingLevel(module: EdgeCore.ClientLibrary.Log.Module) -> EdgeCore.ClientLibrary.Log.Level
    public static func loggingPrivacy(module: EdgeCore.ClientLibrary.Log.Module) -> EdgeCore.ClientLibrary.Log.Privacy
    public static func log(level: EdgeCore.ClientLibrary.Log.Level, function: Swift.String, line: Swift.Int, items: Any..., module: EdgeCore.ClientLibrary.Log.Module)
    public static func logInfo(function: Swift.String, line: Swift.Int, items: Any..., module: EdgeCore.ClientLibrary.Log.Module)
    public static func logDebug(function: Swift.String, line: Swift.Int, items: Any..., module: EdgeCore.ClientLibrary.Log.Module)
    public static func logFault(function: Swift.String, line: Swift.Int, items: Any..., module: EdgeCore.ClientLibrary.Log.Module)
    public static func logError(function: Swift.String, line: Swift.Int, items: Any..., module: EdgeCore.ClientLibrary.Log.Module)
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.ClientLibrary.AI.Model {
  public struct Usage : Swift.Codable, Swift.Sendable, Swift.Hashable {
    public var promptTokens: Swift.Int?
    public var completionTokens: Swift.Int?
    public var totalTokens: Swift.Int?
    public var tokenPerSecond: Swift.Float?
    #if compiler(>=5.3) && $NonescapableTypes
    public init(promptTokens: Swift.Int? = nil, completionTokens: Swift.Int? = nil, totalTokens: Swift.Int? = nil, tokenPerSecond: Swift.Float? = nil)
    #endif
    public static func == (a: EdgeCore.ClientLibrary.AI.Model.Usage, b: EdgeCore.ClientLibrary.AI.Model.Usage) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.DeveloperConsole {
  public struct CreateAppRequest : Swift.Codable, Swift.Sendable {
    public let clientName: Swift.String
    public let redirectUris: [Swift.String]
    public let logoUri: Swift.String
    public let clientUri: Swift.String
    public init(clientName: Swift.String, redirectUris: [Swift.String], clientUri: Swift.String, logoUri: Swift.String = "https://console.mimik.com/static/media/logo_2.875d71d5.png")
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.ClientLibrary.Authorization {
  public struct AccessToken : Swift.Codable, Swift.Sendable {
    public var accessToken: Swift.String? {
      get
    }
    public var refreshToken: Swift.String? {
      get
    }
    public var scope: Swift.String? {
      get
    }
    public var tokenType: Swift.String? {
      get
    }
    public var expiresIn: Foundation.Date? {
      get
    }
    public var idToken: Swift.String? {
      get
    }
    #if compiler(>=5.3) && $NonescapableTypes
    public init(accessToken: Swift.String? = nil, refreshToken: Swift.String? = nil, scope: Swift.String? = nil, tokenType: Swift.String? = nil, expiresIn: Foundation.Date? = nil, idToken: Swift.String? = nil)
    #endif
    public func validate() throws
    #if compiler(>=5.3) && $NonescapableTypes
    public func decodeToJWT() -> (any JWTDecode.JWT)?
    #endif
    #if compiler(>=5.3) && $NonescapableTypes
    public func decodeToJson() -> SwiftyJSON.JSON?
    #endif
    #if compiler(>=5.3) && $NonescapableTypes
    public func subscriber() -> Swift.String?
    #endif
    #if compiler(>=5.3) && $NonescapableTypes
    public func clientId() -> Swift.String?
    #endif
    #if compiler(>=5.3) && $NonescapableTypes
    public func valueFrom(key: Swift.String) -> Swift.String?
    #endif
    public static func validate(token: Swift.String) throws
    #if compiler(>=5.3) && $NonescapableTypes
    public static func decodeToJWT(token: Swift.String) -> (any JWTDecode.JWT)?
    #endif
    #if compiler(>=5.3) && $NonescapableTypes
    public static func decodeToJson(token: Swift.String) -> SwiftyJSON.JSON?
    #endif
    #if compiler(>=5.3) && $NonescapableTypes
    public static func subscriber(token: Swift.String) -> Swift.String?
    #endif
    #if compiler(>=5.3) && $NonescapableTypes
    public static func expiresIn(token: Swift.String) -> Foundation.Date?
    #endif
    #if compiler(>=5.3) && $NonescapableTypes
    public static func clientId(token: Swift.String) -> Swift.String?
    #endif
    #if compiler(>=5.3) && $NonescapableTypes
    public static func valueFrom(token: Swift.String, key: Swift.String) -> Swift.String?
    #endif
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.ClientLibrary.Request {
  public static func uploadContent(sourceFileUrl: Foundation.URL, destinationUrl: Foundation.URL, mimeType: Swift.String, progressHandler: @escaping EdgeCore.ClientLibrary.Request.ProgressHandler) async throws
  public static func downloadContent(sourceUrl: Foundation.URL, destinationFileUrl: Foundation.URL, progressHandler: @escaping EdgeCore.ClientLibrary.Request.ProgressHandler) async throws
  public static func downloadImageContent(sourceUrl: Foundation.URL) async throws -> UIKit.UIImage
}
extension EdgeCore.ClientLibrary {
  public struct ImageResizeOptions {
    public var size: CoreFoundation.CGSize
    public var compressionQuality: CoreFoundation.CGFloat
    public var bytesLimit: Swift.Int?
    #if compiler(>=5.3) && $NonescapableTypes
    public init(size: CoreFoundation.CGSize, compressionQuality: CoreFoundation.CGFloat, bytesLimit: Swift.Int? = nil)
    #endif
  }
}
extension EdgeCore.ClientLibrary.Request {
  public struct Config : Swift.Sendable {
    public let service: EdgeCore.ClientLibrary.Service
    public let path: Swift.String
    public let method: Alamofire.HTTPMethod
    public let queryItems: [Foundation.URLQueryItem]?
    public let authorization: EdgeCore.ClientLibrary.Authorization?
    public let httpBody: Alamofire.Parameters?
    public let httpHeaders: Alamofire.HTTPHeaders?
    public let pagingHandler: EdgeCore.ClientLibrary.Request.PagingInfoHandler?
    #if compiler(>=5.3) && $NonescapableTypes
    public init(service: EdgeCore.ClientLibrary.Service, path: Swift.String, method: Alamofire.HTTPMethod, queryItems: [Foundation.URLQueryItem]?, authorization: EdgeCore.ClientLibrary.Authorization?, httpBody: Alamofire.Parameters?, httpHeaders: Alamofire.HTTPHeaders? = nil, pagingHandler: EdgeCore.ClientLibrary.Request.PagingInfoHandler? = nil)
    #endif
  }
}
extension EdgeCore.ClientLibrary {
  public struct RuntimeParameters : Swift.Codable, Swift.Sendable {
    public var license: Swift.String
    public var logLevel: EdgeCore.ClientLibrary.RuntimeParameters.LogLevel
    public var nodeInfoLevel: EdgeCore.ClientLibrary.RuntimeParameters.NodeInfoLevel
    @_Concurrency.MainActor public var nodeName: Swift.String
    public var localDiscovery: EdgeCore.ClientLibrary.RuntimeParameters.LocalDiscovery
    public var logFileDir: Swift.String?
    public enum LogLevel : Swift.String, Swift.Codable, Swift.Sendable {
      case trace
      case debug
      case info
      case warn
      case error
      case critical
      case off
      #if compiler(>=5.3) && $NonescapableTypes
      public init?(rawValue: Swift.String)
      #endif
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public enum NodeInfoLevel : Swift.String, Swift.Codable, Swift.Sendable {
      case on
      case off
      case name
      case hwInfoOnly
      #if compiler(>=5.3) && $NonescapableTypes
      public init?(rawValue: Swift.String)
      #endif
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public enum LocalDiscovery : Swift.String, Swift.Codable, Swift.Sendable {
      case on
      case off
      #if compiler(>=5.3) && $NonescapableTypes
      public init?(rawValue: Swift.String)
      #endif
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    #if compiler(>=5.3) && $NonescapableTypes
    @_Concurrency.MainActor public init(license: Swift.String, logLevel: EdgeCore.ClientLibrary.RuntimeParameters.LogLevel = .error, nodeInfoLevel: EdgeCore.ClientLibrary.RuntimeParameters.NodeInfoLevel = .off, nodeName: Swift.String = UIDevice.current.name + "-" + UIDevice.current.model, localDiscovery: EdgeCore.ClientLibrary.RuntimeParameters.LocalDiscovery = .off, logFileDir: Swift.String? = nil)
    #endif
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.ClientLibrary {
  #if compiler(>=5.3) && $NonescapableTypes
  public static func passwordChange(email: Swift.String, currentPassword: Swift.String, newPassword: Swift.String, idToken: Swift.String?, service: EdgeCore.ClientLibrary.Service, webFlow: Swift.Bool = false) async throws -> EdgeCore.ClientLibrary.Authorization
  #endif
}
extension EdgeCore.ClientLibrary {
  public struct AuthUserData : Swift.Codable, Swift.Sendable {
    public let data: EdgeCore.ClientLibrary.AuthUser?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct AuthUser : Swift.Codable, Swift.Sendable {
    public var userId: Swift.String?
    public var email: Swift.String?
    public var phoneNumber: Swift.String?
    public var roles: [Swift.String]?
    public var identities: EdgeCore.ClientLibrary.JSONValue?
    #if compiler(>=5.3) && $NonescapableTypes
    public init(userId: Swift.String?, email: Swift.String?, phoneNumber: Swift.String?, roles: [Swift.String]?, identities: EdgeCore.ClientLibrary.JSONValue?)
    #endif
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.ClientLibrary.Microservice {
  #if compiler(>=5.3) && $NonescapableTypes
  public func callStream(config: EdgeCore.ClientLibrary.Microservice.Request.Config, streamHandler: @escaping (_ stream: Swift.Result<Foundation.Data, Foundation.NSError>) -> Swift.Void, requestHandler: @escaping (_ request: Alamofire.DataStreamRequest) -> Swift.Void) async throws -> Alamofire.DataStreamRequest.Completion
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public func callStream<T>(config: EdgeCore.ClientLibrary.Microservice.Request.Config, type: T.Type, streamHandler: @escaping (_ stream: Swift.Result<T, Foundation.NSError>) -> Swift.Void, requestHandler: @escaping (_ request: Alamofire.DataStreamRequest) -> Swift.Void) async throws -> Alamofire.DataStreamRequest.Completion where T : Swift.Decodable, T : Swift.Encodable
  #endif
}
extension EdgeCore.ClientLibrary.AI.Model {
  public struct Choice : Swift.Codable, Swift.Sendable, Swift.Hashable {
    public var index: Swift.Int?
    public var delta: EdgeCore.ClientLibrary.AI.Model.Message?
    public var message: EdgeCore.ClientLibrary.AI.Model.Message?
    public var logprobs: EdgeCore.ClientLibrary.JSONValue?
    public var finishReason: Swift.String?
    #if compiler(>=5.3) && $NonescapableTypes
    public init(index: Swift.Int? = nil, delta: EdgeCore.ClientLibrary.AI.Model.Message? = nil, message: EdgeCore.ClientLibrary.AI.Model.Message? = nil, logprobs: EdgeCore.ClientLibrary.JSONValue? = nil, finishReason: Swift.String? = nil)
    #endif
    public static func == (a: EdgeCore.ClientLibrary.AI.Model.Choice, b: EdgeCore.ClientLibrary.AI.Model.Choice) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.ClientLibrary {
  public struct Document : Swift.Codable, Swift.Sendable {
    #if compiler(>=5.3) && $NonescapableTypes
    public static func uttypeFor(filenameExtension: Swift.String) -> UniformTypeIdentifiers.UTType?
    #endif
    #if compiler(>=5.3) && $NonescapableTypes
    public static func uttypeFor(mimeType: Swift.String) -> UniformTypeIdentifiers.UTType?
    #endif
    #if compiler(>=5.3) && $NonescapableTypes
    public static func filenameExtensionFor(type: UniformTypeIdentifiers.UTType) -> Swift.String?
    #endif
    #if compiler(>=5.3) && $NonescapableTypes
    public static func filenameExtentionFor(mimeType: Swift.String) -> Swift.String?
    #endif
    #if compiler(>=5.3) && $NonescapableTypes
    public static func mimeTypeFor(type: UniformTypeIdentifiers.UTType) -> Swift.String?
    #endif
    #if compiler(>=5.3) && $NonescapableTypes
    public static func mimeTypeFor(filenameExtension: Swift.String) -> Swift.String?
    #endif
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.ClientLibrary {
  #if compiler(>=5.3) && $NonescapableTypes
  @available(*, unavailable, message: "Start using DeveloperConsole/Apps/authenticateRuntime function instead.")
  public static func authorizeDeveloper(developerIdToken: Swift.String, runtimeIdToken: Swift.String?) async -> Swift.Result<EdgeCore.ClientLibrary.Authorization, Foundation.NSError>
  #endif
}
extension EdgeCore.ClientLibrary {
  #if compiler(>=5.3) && $NonescapableTypes
  public static func passwordReset(email: Swift.String, idToken: Swift.String?, service: EdgeCore.ClientLibrary.Service, webFlow: Swift.Bool = false) async throws -> EdgeCore.ClientLibrary.Authorization
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public static func verifyPasswordReset(codes: EdgeCore.ClientLibrary.Authorization.ValidationCodes, newPassword: Swift.String, idToken: Swift.String?, service: EdgeCore.ClientLibrary.Service, webFlow: Swift.Bool = false) async throws -> EdgeCore.ClientLibrary.Authorization
  #endif
}
extension EdgeCore.ClientLibrary.Service {
  public struct HealthCheckData : Swift.Codable, Swift.Sendable {
    public let data: EdgeCore.ClientLibrary.Service.HealthCheck?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct HealthCheck : Swift.Codable, Swift.Sendable {
    public struct ClusterStatus : Swift.Codable, Swift.Sendable {
      public let nbServers: Swift.String?
      public let updatedAt: Foundation.Date?
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct GitRepo : Swift.Codable, Swift.Sendable {
      public let branch: Swift.String?
      public let hashKey: Swift.String?
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Deployment : Swift.Codable, Swift.Sendable {
      public let gitRepo: EdgeCore.ClientLibrary.Service.HealthCheck.GitRepo?
      public let time: Swift.String?
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Address : Swift.Codable, Swift.Sendable {
      public let local: Swift.String?
      public let addressPublic: Swift.String?
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct MemoryUsage : Swift.Codable, Swift.Sendable {
      public let xternal: Swift.Int?
      public let rss: Swift.Int?
      public let arrayBuffers: Swift.Int?
      public let heapUsed: Swift.Int?
      public let heapTotal: Swift.Int?
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct CPUUsage : Swift.Codable, Swift.Sendable {
      public let user: Swift.Int?
      public let system: Swift.Int?
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Location : Swift.Codable, Swift.Sendable {
      public let type: Swift.String?
      public let coordinates: [Swift.Double]?
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public let swaggerFileVersion: Swift.String?
    public let type: Swift.String?
    public let uptime: Foundation.Decimal?
    public let version: Swift.String?
    public let registrationStatus: Swift.String?
    public let port: Swift.String?
    public let platform: Swift.String?
    public let pidValue: Swift.Int?
    public let nodeVersion: Swift.String?
    public let name: Swift.String?
    public let memoryUsage: EdgeCore.ClientLibrary.Service.HealthCheck.MemoryUsage?
    public let location: EdgeCore.ClientLibrary.Service.HealthCheck.Location?
    public let id: Swift.String?
    public let environment: Swift.String?
    public let deployment: EdgeCore.ClientLibrary.Service.HealthCheck.Deployment?
    public let cpuUsage: EdgeCore.ClientLibrary.Service.HealthCheck.CPUUsage?
    public let clusterStatus: EdgeCore.ClientLibrary.Service.HealthCheck.ClusterStatus?
    public let addresses: [EdgeCore.ClientLibrary.Service.HealthCheck.Address]?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.ClientLibrary.Request {
  public typealias PagingInfoHandler = @Sendable (_ paging: EdgeCore.ClientLibrary.Request.PagingInfo?) -> Swift.Void
  public typealias ProgressHandler = @Sendable (_ progress: Foundation.Progress) -> Swift.Void
  public struct PagingInfo : Swift.Codable, Swift.Sendable {
    public let count: Swift.Int
    public let startAfter: Swift.String
    public init(count: Swift.Int, startAfter: Swift.String)
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.ClientLibrary {
  public struct Authorization : Swift.Codable, Swift.Sendable {
    public var token: EdgeCore.ClientLibrary.Authorization.AccessToken? {
      get
    }
    public var validationCodes: EdgeCore.ClientLibrary.Authorization.ValidationCodes? {
      get
    }
    public init(token: EdgeCore.ClientLibrary.Authorization.AccessToken)
    public init(validationCodes: EdgeCore.ClientLibrary.Authorization.ValidationCodes)
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.ClientLibrary {
  public static func authorizeUser(phoneNumber: Swift.String, idToken: Swift.String, service: EdgeCore.ClientLibrary.Service) async throws -> EdgeCore.ClientLibrary.Authorization
  public static func verifyUser(codes: EdgeCore.ClientLibrary.Authorization.ValidationCodes, idToken: Swift.String, service: EdgeCore.ClientLibrary.Service) async throws -> EdgeCore.ClientLibrary.Authorization
}
public typealias EdgeEngineClient = EdgeCore.ClientRuntime
public protocol ClientRuntime {
  static func configureRuntimePort(to port: Swift.Int32) throws
  static func expectedRuntimeVersion() -> Swift.String
  static func manageRuntimeLifecycle(manage: Swift.Bool) throws
  @_Concurrency.MainActor static func startRuntime(parameters: EdgeCore.ClientLibrary.RuntimeParameters) async throws
  @_Concurrency.MainActor static func stopRuntime()
  @_Concurrency.MainActor static func restartRuntime() async throws
  @_Concurrency.MainActor static func resetRuntime() throws
  @_Concurrency.MainActor static func runtimeIsRunning() -> Swift.Bool
  #if compiler(>=5.3) && $NonescapableTypes
  static func runtimeParameters() -> EdgeCore.ClientLibrary.RuntimeParameters?
  #endif
  static func runtimeLifecycleIsManaged() -> Swift.Bool
}
extension EdgeCore.ClientLibrary {
  #if compiler(>=5.3) && $NonescapableTypes
  public static func signup(email: Swift.String, password: Swift.String, idToken: Swift.String?, service: EdgeCore.ClientLibrary.Service, webFlow: Swift.Bool = false) async throws -> EdgeCore.ClientLibrary.Authorization
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public static func verifySignup(codes: EdgeCore.ClientLibrary.Authorization.ValidationCodes, password: Swift.String, idToken: Swift.String?, service: EdgeCore.ClientLibrary.Service, webFlow: Swift.Bool = false) async throws -> EdgeCore.ClientLibrary.Authorization
  #endif
}
extension EdgeCore.ClientLibrary {
  public static func initiateAccountDeletion(email: Swift.String, password: Swift.String, idToken: Swift.String, service: EdgeCore.ClientLibrary.Service) async throws -> EdgeCore.ClientLibrary.Authorization
  public static func verifyAccountDeletion(codes: EdgeCore.ClientLibrary.Authorization.ValidationCodes, password: Swift.String, idToken: Swift.String, service: EdgeCore.ClientLibrary.Service) async throws -> EdgeCore.ClientLibrary.Authorization
  public static func completeAccountDeletion(authorization: EdgeCore.ClientLibrary.Authorization, service: EdgeCore.ClientLibrary.Service) async throws -> SwiftyJSON.JSON
}
extension EdgeCore.ClientLibrary {
  public static func accountInformation(service: EdgeCore.ClientLibrary.Service, authorization: EdgeCore.ClientLibrary.Authorization) async throws -> EdgeCore.ClientLibrary.AuthUser
  public static func authenticationScopes(serverUrl: Foundation.URL) async throws -> [Swift.String]
}
extension EdgeCore.ClientLibrary.Request {
  open class URLComponentsBuilder {
    public init()
    open func create() -> Foundation.URLComponents
    #if compiler(>=5.3) && $NonescapableTypes
    open func set(components: Foundation.URLComponents?) -> EdgeCore.ClientLibrary.Request.URLComponentsBuilder
    #endif
    open func set(scheme: Swift.String, host: Swift.String, port: Swift.Int, path: Swift.String) -> EdgeCore.ClientLibrary.Request.URLComponentsBuilder
    open func set(scheme: Swift.String, host: Swift.String, port: Swift.Int) -> EdgeCore.ClientLibrary.Request.URLComponentsBuilder
    open func set(scheme: Swift.String) -> EdgeCore.ClientLibrary.Request.URLComponentsBuilder
    open func set(host: Swift.String) -> EdgeCore.ClientLibrary.Request.URLComponentsBuilder
    open func set(port: Swift.Int) -> EdgeCore.ClientLibrary.Request.URLComponentsBuilder
    open func set(path: Swift.String) -> EdgeCore.ClientLibrary.Request.URLComponentsBuilder
    open func append(path: Swift.String) -> EdgeCore.ClientLibrary.Request.URLComponentsBuilder
    public func set(queryItems: [Swift.String : Any]) -> EdgeCore.ClientLibrary.Request.URLComponentsBuilder
    public func set(query: Swift.String) -> EdgeCore.ClientLibrary.Request.URLComponentsBuilder
    public func set(user: Swift.String) -> EdgeCore.ClientLibrary.Request.URLComponentsBuilder
    public func set(password: Swift.String) -> EdgeCore.ClientLibrary.Request.URLComponentsBuilder
    public func set(fragment: Swift.String) -> EdgeCore.ClientLibrary.Request.URLComponentsBuilder
    @objc deinit
  }
}
extension EdgeCore.ClientLibrary.Microservice {
  public struct NewContainer : Swift.Codable, Swift.Sendable {
    public var name: Swift.String?
    public var image: Swift.String?
    public var env: [Swift.String : Swift.String]?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.ClientLibrary.AI {
  public struct Model : Swift.Codable, Swift.Sendable, Swift.Hashable {
    #if compiler(>=5.3) && $NonescapableTypes
    public init(id: Swift.String? = nil, kind: EdgeCore.ClientLibrary.AI.Model.Kind? = nil, object: EdgeCore.ClientLibrary.AI.Model.Object? = nil, created: Swift.Int? = nil, ownedBy: Swift.String? = nil, readyToUse: Swift.Bool? = nil, totalSize: Swift.Double? = nil, mmprojTotalSize: Swift.Double? = nil, excludeFromBackup: Swift.Bool? = nil, url: Swift.String? = nil, mmprojUrl: Swift.String? = nil, modelChatHint: Swift.String? = nil, serviceType: Swift.String? = nil)
    #endif
    public var id: Swift.String?
    public enum Object : Swift.String, Swift.Codable, Swift.Sendable, Swift.Hashable {
      case model
      #if compiler(>=5.3) && $NonescapableTypes
      public init?(rawValue: Swift.String)
      #endif
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public enum Kind : Swift.String, Swift.Codable, Swift.Sendable, Swift.Hashable {
      case llm
      case vlm
      #if compiler(>=5.3) && $NonescapableTypes
      public init?(rawValue: Swift.String)
      #endif
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public var kind: EdgeCore.ClientLibrary.AI.Model.Kind?
    public var object: EdgeCore.ClientLibrary.AI.Model.Object?
    public var created: Swift.Int?
    public var ownedBy: Swift.String?
    public var readyToUse: Swift.Bool?
    public var totalSize: Swift.Double?
    public var mmprojTotalSize: Swift.Double?
    public var excludeFromBackup: Swift.Bool?
    public var url: Swift.String?
    public var mmprojUrl: Swift.String?
    public var modelChatHint: Swift.String?
    public var serviceType: Swift.String?
    public struct DownloadProgress : Swift.Codable, Swift.Sendable, Swift.Hashable {
      public var totalSize: Swift.Double
      public var size: Swift.Double
      public static func == (a: EdgeCore.ClientLibrary.AI.Model.DownloadProgress, b: EdgeCore.ClientLibrary.AI.Model.DownloadProgress) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public static func == (a: EdgeCore.ClientLibrary.AI.Model, b: EdgeCore.ClientLibrary.AI.Model) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.ClientLibrary.Request {
  public static func exportVideo(session: AVFoundation.AVAssetExportSession, outputURL: Foundation.URL, outFileType: AVFoundation.AVFileType) async throws
}
extension EdgeCore.ClientLibrary {
  public struct Request : Swift.Codable, Swift.Sendable {
    #if compiler(>=5.3) && $NonescapableTypes
    public static func authorizedRequest(url: Foundation.URL, method: Alamofire.HTTPMethod, authorization: EdgeCore.ClientLibrary.Authorization?, httpHeaders: Alamofire.HTTPHeaders?, httpBody: Alamofire.Parameters?, contentType: Swift.String = "application/json") throws -> Foundation.URLRequest
    #endif
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.DeveloperConsole.AuthenticationView : Swift.Sendable {}
extension EdgeCore.ClientLibrary.AI.Model.DeleteModelResponse.Object : Swift.RawRepresentable {}
extension EdgeCore.ClientLibrary.AI.Model.ModelsResponse.Object : Swift.RawRepresentable {}
extension EdgeCore.ClientLibrary.Microservice.Container.State : Swift.Equatable {}
extension EdgeCore.ClientLibrary.Microservice.Container.State : Swift.Hashable {}
extension EdgeCore.ClientLibrary.Microservice.Container.State : Swift.RawRepresentable {}
extension EdgeCore.ClientLibrary.AI.ServiceConfiguration.Kind : Swift.Equatable {}
extension EdgeCore.ClientLibrary.AI.ServiceConfiguration.Kind : Swift.Hashable {}
extension EdgeCore.ClientLibrary.AI.ServiceConfiguration.Kind : Swift.RawRepresentable {}
extension EdgeCore.ClientLibrary.Microservice.Component : Swift.Equatable {}
extension EdgeCore.ClientLibrary.Microservice.Component : Swift.Hashable {}
extension EdgeCore.ClientLibrary.Microservice.Component : Swift.RawRepresentable {}
extension EdgeCore.ClientLibrary.Service.VersionCheck.Result : Swift.Equatable {}
extension EdgeCore.ClientLibrary.Service.VersionCheck.Result : Swift.Hashable {}
extension EdgeCore.ClientLibrary.Service.VersionCheck.Result : Swift.RawRepresentable {}
extension EdgeCore.ClientLibrary.AI.Model.CreateModelRequest.ChatTemplateHint : Swift.RawRepresentable {}
extension EdgeCore.ClientLibrary.Log.Level : Swift.Equatable {}
extension EdgeCore.ClientLibrary.Log.Level : Swift.Hashable {}
extension EdgeCore.ClientLibrary.Log.Level : Swift.RawRepresentable {}
extension EdgeCore.ClientLibrary.Log.Privacy : Swift.Equatable {}
extension EdgeCore.ClientLibrary.Log.Privacy : Swift.Hashable {}
extension EdgeCore.ClientLibrary.Log.Privacy : Swift.RawRepresentable {}
extension EdgeCore.ClientLibrary.RuntimeParameters.LogLevel : Swift.Equatable {}
extension EdgeCore.ClientLibrary.RuntimeParameters.LogLevel : Swift.Hashable {}
extension EdgeCore.ClientLibrary.RuntimeParameters.LogLevel : Swift.RawRepresentable {}
extension EdgeCore.ClientLibrary.RuntimeParameters.NodeInfoLevel : Swift.Equatable {}
extension EdgeCore.ClientLibrary.RuntimeParameters.NodeInfoLevel : Swift.Hashable {}
extension EdgeCore.ClientLibrary.RuntimeParameters.NodeInfoLevel : Swift.RawRepresentable {}
extension EdgeCore.ClientLibrary.RuntimeParameters.LocalDiscovery : Swift.Equatable {}
extension EdgeCore.ClientLibrary.RuntimeParameters.LocalDiscovery : Swift.Hashable {}
extension EdgeCore.ClientLibrary.RuntimeParameters.LocalDiscovery : Swift.RawRepresentable {}
extension EdgeCore.ClientLibrary.AI.Model.Object : Swift.RawRepresentable {}
extension EdgeCore.ClientLibrary.AI.Model.Kind : Swift.RawRepresentable {}
