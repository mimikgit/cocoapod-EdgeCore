// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1.2 effective-5.10 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
// swift-module-flags: -target x86_64-apple-ios16.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -enable-upcoming-feature ConciseMagicFile -enable-upcoming-feature ForwardTrailingClosures -enable-upcoming-feature DeprecateApplicationMain -enable-upcoming-feature ImportObjcForwardDeclarations -enable-upcoming-feature DisableOutwardActorInference -enable-upcoming-feature IsolatedDefaultValues -enable-upcoming-feature GlobalConcurrency -enable-upcoming-feature InferSendableFromCaptures -enable-upcoming-feature ImplicitOpenExistentials -enable-upcoming-feature ExistentialAny -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name EdgeCore
// swift-module-flags-ignorable: -no-verify-emitted-module-interface -interface-compiler-version 6.1.2
import AVFoundation
import Alamofire
import AppAuth
import Combine
import Foundation
import JWTDecode
import Swift
import SwiftUI
import SwiftyJSON
import UIKit
import UniformTypeIdentifiers
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os.log
import os
extension EdgeCore.EdgeClient.AI.Model {
  public struct CompletionResponse : Swift.Codable, Swift.Sendable, Swift.Hashable, EdgeCore.EdgeClient.AI.AssistantOutput {
    public var id: Swift.String?
    public var object: Swift.String?
    public var created: Swift.Int?
    public var model: Swift.String?
    public var systemFingerprint: Swift.String?
    public var choices: [EdgeCore.EdgeClient.AI.Model.Choice]?
    public var usage: EdgeCore.EdgeClient.AI.Model.Usage?
    public init(id: Swift.String? = nil, object: Swift.String? = nil, created: Swift.Int? = nil, model: Swift.String? = nil, systemFingerprint: Swift.String? = nil, choices: [EdgeCore.EdgeClient.AI.Model.Choice]? = nil, usage: EdgeCore.EdgeClient.AI.Model.Usage? = nil)
    public func contentMessage() -> EdgeCore.EdgeClient.AI.Model.Message?
    public func contentText() -> Swift.String?
    public func role() -> Swift.String
    public func finished() -> Swift.Bool
    public func assistantOutput() -> EdgeCore.EdgeClient.AI.Model.CompletionResponse
    public func assistantOutputMessage() -> EdgeCore.EdgeClient.AI.Model.Message
    public static func == (a: EdgeCore.EdgeClient.AI.Model.CompletionResponse, b: EdgeCore.EdgeClient.AI.Model.CompletionResponse) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.EdgeClient {
  public struct Node : Swift.Codable, Swift.Sendable {
    public var id: Swift.String?
    public var name: Swift.String?
    public var accountId: Swift.String?
    public var os: Swift.String?
    public var url: Swift.String?
    public var routing: EdgeCore.EdgeClient.Node.Routing?
    public var avatar: Swift.String?
    public var description: Swift.String {
      get
    }
    public static func preferredNodeName() -> Swift.String
    public func effectiveUrl() -> Foundation.URL?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.EdgeClient {
  public static func integrateAIService(accessToken: Swift.String, apiKey: Swift.String, useCase source: EdgeCore.EdgeClient.UseCaseConfigurationSource, requestHandler: @escaping (Alamofire.DataStreamRequest) -> Swift.Void = { _ in }) async -> Swift.Result<EdgeCore.EdgeClient.AI.ServiceIntegration, Foundation.NSError>
  @available(*, deprecated, message: "Deprecated. Use integrateAIService method instead. For model downloads use EdgeClient.AI.ServiceInterface instead.")
  final public func integrateAI(accessToken: Swift.String, apiKey: Swift.String, config: EdgeCore.EdgeClient.UseCase, model: EdgeCore.EdgeClient.AI.Model.CreateModelRequest?, downloadHandler: @escaping (_ download: Swift.Result<EdgeCore.EdgeClient.AI.Model.DownloadProgress, Foundation.NSError>) -> Swift.Void, requestHandler: @escaping (_ request: Alamofire.DataStreamRequest) -> Swift.Void) async -> Swift.Result<EdgeCore.EdgeClient.UseCase, Foundation.NSError>
  @available(*, deprecated, message: "Deprecated. Use alternate integrateAI method instead. For model downloads use EdgeClient.AI.ServiceInterface instead.")
  final public func integrateAI(accessToken: Swift.String, apiKey: Swift.String, configUrl: Swift.String, model: EdgeCore.EdgeClient.AI.Model.CreateModelRequest?, downloadHandler: @escaping (_ download: Swift.Result<EdgeCore.EdgeClient.AI.Model.DownloadProgress, Foundation.NSError>) -> Swift.Void, requestHandler: @escaping (_ request: Alamofire.DataStreamRequest) -> Swift.Void) async -> Swift.Result<EdgeCore.EdgeClient.UseCase, Foundation.NSError>
  @available(*, deprecated, message: "Deprecated. Use EdgeClient.AI.ServiceInterface instead.")
  final public func downloadAI(model: EdgeCore.EdgeClient.AI.Model.CreateModelRequest, accessToken: Swift.String, apiKey: Swift.String, useCase: EdgeCore.EdgeClient.UseCase, downloadHandler: @escaping (_ download: Swift.Result<EdgeCore.EdgeClient.AI.Model.DownloadProgress, Foundation.NSError>) -> Swift.Void, requestHandler: @escaping (_ request: Alamofire.DataStreamRequest) -> Swift.Void) async -> Swift.Result<EdgeCore.EdgeClient.AI.Model, Foundation.NSError>
  public static func deleteAIModel(id: Swift.String, accessToken: Swift.String, apiKey: Swift.String, useCase: EdgeCore.EdgeClient.UseCase) async -> Swift.Result<EdgeCore.EdgeClient.AI.Model.DeleteModelResponseData, Foundation.NSError>
  @available(*, deprecated, message: "Deprecated. Use EdgeClient.AI.ServiceInterface instead.")
  final public func aiModels(accessToken: Swift.String, apiKey: Swift.String, useCase: EdgeCore.EdgeClient.UseCase) async -> Swift.Result<[EdgeCore.EdgeClient.AI.Model], Foundation.NSError>
  @available(*, deprecated, message: "Deprecated. Use EdgeClient.AI.ServiceInterface instead.")
  final public func aiModel(id: Swift.String, accessToken: Swift.String, apiKey: Swift.String, useCase: EdgeCore.EdgeClient.UseCase) async -> Swift.Result<EdgeCore.EdgeClient.AI.Model, Foundation.NSError>
  @available(*, deprecated, message: "Deprecated. Use EdgeClient.AI.ServiceInterface instead.")
  final public func chatAI(request: EdgeCore.EdgeClient.AI.Model.ChatRequest, streamHandler: @escaping (_ stream: Swift.Result<EdgeCore.EdgeClient.AI.Model.CompletionType, Foundation.NSError>) -> Swift.Void, requestHandler: @escaping (_ request: Alamofire.DataStreamRequest) -> Swift.Void) async -> Swift.Result<Alamofire.DataStreamRequest.Completion, Foundation.NSError>
  @available(*, deprecated, message: "Deprecated. Use EdgeClient.AI.ServiceInterface instead.")
  final public func visionAI(request: EdgeCore.EdgeClient.AI.Model.ChatRequest, image: UIKit.UIImage, resizeImgOptions: EdgeCore.EdgeClient.ImageResizeOptions? = nil, streamHandler: @escaping (_ stream: Swift.Result<EdgeCore.EdgeClient.AI.Model.CompletionType, Foundation.NSError>) -> Swift.Void, requestHandler: @escaping (_ request: Alamofire.DataStreamRequest) -> Swift.Void) async -> Swift.Result<Alamofire.DataStreamRequest.Completion, Foundation.NSError>
  @available(*, deprecated, message: "Deprecated. Use EdgeClient.AI.ServiceInterface instead.")
  final public func chatAI(request: EdgeCore.EdgeClient.AI.Model.ChatRequest, requestHandler: @escaping (_ request: Alamofire.DataTask<Foundation.Data>) -> Swift.Void) async -> Swift.Result<EdgeCore.EdgeClient.AI.Model.CompletionResponse, Foundation.NSError>
}
extension EdgeCore.EdgeClient.Request {
  public static func call<T>(config: EdgeCore.EdgeClient.Request.Config, type: T.Type) async -> Swift.Result<T, Foundation.NSError> where T : Swift.Decodable, T : Swift.Encodable
  public static func call(config: EdgeCore.EdgeClient.Request.Config) async -> Swift.Result<SwiftyJSON.JSON, Foundation.NSError>
}
extension EdgeCore.EdgeClient.Request {
  public static func decode<T>(_ type: T.Type, from data: Foundation.Data) -> (decodableObj: T?, error: (any Swift.Error)?) where T : Swift.Decodable
}
extension EdgeCore.EdgeClient.AI {
  public protocol ServiceInterface : Combine.ObservableObject, EdgeCore.EdgeClient.AI.AssistantModels, EdgeCore.EdgeClient.AI.AssistantPrompt {
    var configuration: EdgeCore.EdgeClient.AI.ServiceConfiguration { get }
  }
  public protocol AssistantPrompt {
    func assistantPrompt(prompt: EdgeCore.EdgeClient.AI.Model.Message) async throws -> EdgeCore.EdgeClient.AI.CancellableStream<EdgeCore.EdgeClient.AI.Model.CompletionResponse>
    func assistantVisionPrompt(prompt: EdgeCore.EdgeClient.AI.Model.Message, image: UIKit.UIImage, resizeImgOptions: EdgeCore.EdgeClient.ImageResizeOptions?) async throws -> EdgeCore.EdgeClient.AI.CancellableStream<EdgeCore.EdgeClient.AI.Model.CompletionResponse>
  }
  public enum DownloadAIEvent {
    case request(Alamofire.DataStreamRequest)
    case progress(EdgeCore.EdgeClient.AI.Model.DownloadProgress)
    case completed(EdgeCore.EdgeClient.AI.Model)
  }
  public protocol AssistantModels {
    func availableModels() async -> Swift.Result<[EdgeCore.EdgeClient.AI.Model], Foundation.NSError>
    func availableModelsMessage() async -> Swift.Result<EdgeCore.EdgeClient.AI.Model.Message, Foundation.NSError>
    func downloadAI(model: EdgeCore.EdgeClient.AI.Model.CreateModelRequest, accessToken: Swift.String, apiKey: Swift.String, useCase: EdgeCore.EdgeClient.UseCase) async -> EdgeCore.EdgeClient.AI.CancellableStream<EdgeCore.EdgeClient.AI.DownloadAIEvent>
  }
  public protocol AssistantOutput {
    func assistantOutput() -> EdgeCore.EdgeClient.AI.Model.CompletionResponse
  }
  public struct CancellableStream<T> {
    public let stream: _Concurrency.AsyncThrowingStream<T, any Swift.Error>
    public let cancel: () -> Swift.Void
  }
}
extension EdgeCore.EdgeClient.AI {
  public class HybridClient : EdgeCore.EdgeClient.AI.ServiceInterface {
    final public let configuration: EdgeCore.EdgeClient.AI.ServiceConfiguration
    public init(configuration: EdgeCore.EdgeClient.AI.ServiceConfiguration)
    public func assistantVisionPrompt(prompt: EdgeCore.EdgeClient.AI.Model.Message, image: UIKit.UIImage, resizeImgOptions: EdgeCore.EdgeClient.ImageResizeOptions?) async throws -> EdgeCore.EdgeClient.AI.CancellableStream<EdgeCore.EdgeClient.AI.Model.CompletionResponse>
    public func assistantPrompt(prompt: EdgeCore.EdgeClient.AI.Model.Message) async throws -> EdgeCore.EdgeClient.AI.CancellableStream<EdgeCore.EdgeClient.AI.Model.CompletionResponse>
    public func availableModels() async -> Swift.Result<[EdgeCore.EdgeClient.AI.Model], Foundation.NSError>
    public func availableModelsMessage() async -> Swift.Result<EdgeCore.EdgeClient.AI.Model.Message, Foundation.NSError>
    public func downloadAI(model: EdgeCore.EdgeClient.AI.Model.CreateModelRequest, accessToken: Swift.String, apiKey: Swift.String, useCase: EdgeCore.EdgeClient.UseCase) async -> EdgeCore.EdgeClient.AI.CancellableStream<EdgeCore.EdgeClient.AI.DownloadAIEvent>
    public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
    @objc deinit
  }
}
extension EdgeCore.EdgeClient.AI.ServiceConfiguration {
  public struct Endpoint : Swift.Identifiable, Swift.Hashable {
    public let baseURL: Swift.String
    public let apiKey: Swift.String?
    public let modelEndpoint: Swift.String
    public let chatEndpoint: Swift.String?
    public let headers: Alamofire.HTTPHeaders
    public let separators: Swift.String
    public let modelId: Swift.String?
    public var id: Swift.String {
      get
    }
    public init(baseURL: Swift.String, apiKey: Swift.String?, modelEndpoint: Swift.String, chatEndpoint: Swift.String?, headers: Alamofire.HTTPHeaders, separators: Swift.String, modelId: Swift.String?)
    public static func == (a: EdgeCore.EdgeClient.AI.ServiceConfiguration.Endpoint, b: EdgeCore.EdgeClient.AI.ServiceConfiguration.Endpoint) -> Swift.Bool
    public typealias ID = Swift.String
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension EdgeCore.EdgeClient.Microservice {
  public struct NewImage : Swift.Codable, Swift.Sendable {
    public var url: Swift.String?
    public var base64Image: Swift.String?
    public init(url: Swift.String?, base64Image: Swift.String?)
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.EdgeClient.AI.Model {
  public struct DeleteModelResponseData : Swift.Codable, Swift.Sendable, Swift.Hashable {
    public var data: EdgeCore.EdgeClient.AI.Model.DeleteModelResponse?
    public init(data: EdgeCore.EdgeClient.AI.Model.DeleteModelResponse? = nil)
    public static func == (a: EdgeCore.EdgeClient.AI.Model.DeleteModelResponseData, b: EdgeCore.EdgeClient.AI.Model.DeleteModelResponseData) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct DeleteModelResponse : Swift.Codable, Swift.Sendable, Swift.Hashable {
    public enum Object : Swift.String, Swift.Codable, Swift.Sendable, Swift.Hashable {
      case model
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public var id: Swift.String?
    public var object: EdgeCore.EdgeClient.AI.Model.DeleteModelResponse.Object?
    public var deleted: Swift.Bool?
    public init(id: Swift.String? = nil, object: EdgeCore.EdgeClient.AI.Model.DeleteModelResponse.Object? = nil, deleted: Swift.Bool? = nil)
    public static func == (a: EdgeCore.EdgeClient.AI.Model.DeleteModelResponse, b: EdgeCore.EdgeClient.AI.Model.DeleteModelResponse) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.EdgeClient.Authorization {
  public struct ValidationCodes : Swift.Codable, Swift.Sendable {
    public var mfaCode: Swift.String? {
      get
    }
    public var oobCode: Swift.String? {
      get
    }
    public var bindingCode: Swift.String? {
      get
    }
    public init(mfaCode: Swift.String?, oobCode: Swift.String?, bindingCode: Swift.String?)
    public var description: Swift.String {
      get
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.EdgeClient.AI.Model {
  public struct ChatRequest : Swift.Codable, Swift.Sendable {
    public let modelId: Swift.String
    public let accessToken: Swift.String
    public let apiKey: Swift.String
    public let prompt: EdgeCore.EdgeClient.AI.Model.Message
    public let useCase: EdgeCore.EdgeClient.UseCase
    public let context: [EdgeCore.EdgeClient.AI.Model.Message]?
    public var temperature: Swift.Float
    public init(modelId: Swift.String, accessToken: Swift.String, apiKey: Swift.String, prompt: EdgeCore.EdgeClient.AI.Model.Message, useCase: EdgeCore.EdgeClient.UseCase, context: [EdgeCore.EdgeClient.AI.Model.Message]? = nil, temperature: Swift.Float? = nil)
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.EdgeClient {
  public static func authorizeUserAccess(authorization: EdgeCore.EdgeClient.Authorization, service: EdgeCore.EdgeClient.Service) async -> Swift.Result<EdgeCore.EdgeClient.Authorization, Foundation.NSError>
  public static func authorizeUserAccess(federatedToken: Swift.String, policyId: Swift.String, idToken: Swift.String, service: EdgeCore.EdgeClient.Service) async -> Swift.Result<EdgeCore.EdgeClient.Authorization, Foundation.NSError>
  @available(*, deprecated, renamed: "authorizeBackendUse(federatedToken:policyId:idToken:service:)")
  final public func authorizeBackendUse(federatedToken: Swift.String, policyId: Swift.String, edgeEngineIdToken: Swift.String, service: EdgeCore.EdgeClient.Service) async -> Swift.Result<EdgeCore.EdgeClient.Authorization, Foundation.NSError>
}
extension EdgeCore.EdgeClient {
  public struct Service : Swift.Codable, Swift.Sendable {
    public var rootUrl: Foundation.URL
    public var basePath: Swift.String?
    public var clientId: Swift.String?
    public var expectedVersion: Swift.String?
    public var healthCheckPath: Swift.String?
    public var scope: [Swift.String]?
    public init(rootUrl: Foundation.URL, basePath: Swift.String? = nil, clientId: Swift.String? = nil, expectedVersion: Swift.String? = nil, healthCheckPath: Swift.String? = nil, scope: [Swift.String]? = [])
    public func healthCheck() async -> Swift.Result<EdgeCore.EdgeClient.Service.HealthCheck, Foundation.NSError>
    public func versionCheck(requireMatch: Swift.Bool = false) async -> Swift.Result<EdgeCore.EdgeClient.Service.VersionCheck, Foundation.NSError>
    public func urlComponents() -> Foundation.URLComponents?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.EdgeClient.Node {
  public struct Routing : Swift.Codable, Swift.Sendable {
    public var id: Swift.String?
    public var port: Swift.Int64?
    public var url: Swift.String?
    public var description: Swift.String {
      get
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.EdgeClient.Microservice {
  public struct ImageData : Swift.Codable, Swift.Sendable {
    public var data: [EdgeCore.EdgeClient.Microservice.Image]?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Image : Swift.Codable, Swift.Sendable {
    public var id: Swift.String?
    public var name: Swift.String?
    public var repoDigests: [Swift.String]?
    public var created: Swift.Int?
    public var size: Swift.Int?
    public var containers: Swift.Int?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.EdgeClient.AI.Model {
  public struct ModelsResponse : Swift.Codable, Swift.Sendable, Swift.Hashable {
    public enum Object : Swift.String, Swift.Codable, Swift.Sendable, Swift.Hashable {
      case list
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public var object: EdgeCore.EdgeClient.AI.Model.ModelsResponse.Object?
    public var data: [EdgeCore.EdgeClient.AI.Model]?
    public init(object: EdgeCore.EdgeClient.AI.Model.ModelsResponse.Object? = nil, data: [EdgeCore.EdgeClient.AI.Model]? = nil)
    public static func == (a: EdgeCore.EdgeClient.AI.Model.ModelsResponse, b: EdgeCore.EdgeClient.AI.Model.ModelsResponse) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.EdgeClient.Microservice {
  public struct Config : Swift.Codable, Swift.Sendable {
    public var imageName: Swift.String
    public var containerName: Swift.String
    public var basePath: Swift.String
    public var envVariables: [Swift.String : Swift.String]
    public init(imageName: Swift.String, containerName: Swift.String, basePath: Swift.String, envVariables: [Swift.String : Swift.String])
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.EdgeClient.Microservice {
  public struct ContainerData : Swift.Codable, Swift.Sendable {
    public var data: [EdgeCore.EdgeClient.Microservice.Container]?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Container : Swift.Codable, Swift.Sendable {
    public enum State : Swift.String, Swift.Codable, Swift.Sendable {
      case created
      case running
      case removing
      case paused
      case started
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public var id: Swift.String?
    public var image: Swift.String?
    public var imageId: Swift.String?
    public var created: Swift.Int?
    public var state: EdgeCore.EdgeClient.Microservice.Container.State?
    public var env: [Swift.String : Swift.String]?
    public var name: Swift.String?
    public var clientId: Swift.String?
    public func basePath() -> Swift.String?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.EdgeClient {
  public enum UseCaseConfigurationSource {
    case inline(EdgeCore.EdgeClient.UseCase)
    case remote(Foundation.URL)
  }
  public struct UseCase : Swift.Codable, Swift.Sendable {
    public let name: Swift.String?
    public let bundled: Swift.Bool?
    public let version: Swift.String?
    public let features: [EdgeCore.EdgeClient.UseCase.Feature]?
    public let microservices: [EdgeCore.EdgeClient.UseCase.Config]?
    public var deployedMicroservices: [EdgeCore.EdgeClient.Microservice]?
    public init(name: Swift.String?, bundled: Swift.Bool?, version: Swift.String?, features: [EdgeCore.EdgeClient.UseCase.Feature]?, microservices: [EdgeCore.EdgeClient.UseCase.Config]?, deployedMicroservices: [EdgeCore.EdgeClient.Microservice]? = nil)
    public struct Feature : Swift.Codable, Swift.Sendable {
      public let signature: Swift.String
      public let endpoint: Swift.String
      public let service: Swift.String
      public let httpMethod: Swift.String
      public let description: Swift.String?
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Config : Swift.Codable, Swift.Sendable {
      public let name: Swift.String?
      public let serviceVersion: Swift.String?
      public let tarUrl: Swift.String?
      public let shouldDeploy: Swift.Bool?
      public let environment: EdgeCore.EdgeClient.UseCase.Config.Environment?
      public let swagger: EdgeCore.EdgeClient.UseCase.Config.Swagger?
      public struct Environment : Swift.Codable, Swift.Sendable {
        public let name: Swift.String?
        public let basePath: Swift.String?
        public let staticEnvValues: [EdgeCore.EdgeClient.UseCase.Config.Environment.Static]?
        public let dynamicEnvValues: [EdgeCore.EdgeClient.UseCase.Config.Environment.Dynamic]?
        public struct Static : Swift.Codable, Swift.Sendable {
          public let name: Swift.String?
          public let value: Swift.String?
          public func encode(to encoder: any Swift.Encoder) throws
          public init(from decoder: any Swift.Decoder) throws
        }
        public struct Dynamic : Swift.Codable, Swift.Sendable {
          public let name: Swift.String?
          public func encode(to encoder: any Swift.Encoder) throws
          public init(from decoder: any Swift.Decoder) throws
        }
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public struct Swagger : Swift.Codable, Swift.Sendable {
        public let swagger: EdgeCore.EdgeClient.JSONValue?
        public let basePath: EdgeCore.EdgeClient.JSONValue?
        public let info: EdgeCore.EdgeClient.JSONValue?
        public let schemes: EdgeCore.EdgeClient.JSONValue?
        public let produces: EdgeCore.EdgeClient.JSONValue?
        public let paths: EdgeCore.EdgeClient.JSONValue?
        public let securityDefinitions: EdgeCore.EdgeClient.JSONValue?
        public let definitions: EdgeCore.EdgeClient.JSONValue?
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.EdgeClient.Microservice {
  public static func preferredConfig(imageName: Swift.String, containerName: Swift.String, basePath: Swift.String, runtimeFullPathUrl: Foundation.URLComponents, clientId: Swift.String, envVariables: [Swift.String : Swift.String]? = nil, signatureKey: Swift.String? = nil, ownerCode: Swift.String? = nil) -> EdgeCore.EdgeClient.Microservice.Config?
  @available(*, deprecated, renamed: "preferredConfig(imageName:containerName:basePath:runtimeFullPathUrl:clientId:envVariables:signatureKey:ownerCode:)")
  public static func preferredConfig(imageName: Swift.String, containerName: Swift.String, basePath: Swift.String, edgeEngineFullPathUrl: Foundation.URLComponents, clientId: Swift.String, envVariables: [Swift.String : Swift.String]? = nil, signatureKey: Swift.String? = nil, ownerCode: Swift.String? = nil) -> EdgeCore.EdgeClient.Microservice.Config?
  public static func expectedDeployedImageId(imageName: Swift.String, clientId: Swift.String) -> Swift.String
  public static func expectedDeployedContainerId(containerName: Swift.String, clientId: Swift.String) -> Swift.String
  public static func expectedDeployedBasePath(path: Swift.String, clientId: Swift.String) -> Swift.String
  public static func preferredImageName(name: Swift.String) -> Swift.String
  public static func preferredContainerName(name: Swift.String) -> Swift.String
  public static func preferredBasePath(path: Swift.String) -> Swift.String
}
public typealias ClientLibrary = EdgeCore.EdgeClient
@objc @_inheritsConvenienceInitializers final public class EdgeClient : ObjectiveC.NSObject, Swift.Codable, Swift.Sendable {
  public static func setLoggingLevel(module: EdgeCore.EdgeClient.Log.Module, level: EdgeCore.EdgeClient.Log.Level, privacy: EdgeCore.EdgeClient.Log.Privacy, marker: Swift.String = "")
  public static func activateExternalRuntime(host: Swift.String, port: Swift.Int) -> Swift.Result<Foundation.URLComponents, Foundation.NSError>
  @available(*, deprecated, renamed: "activateExternalRuntime")
  public static func activateExternalEdgeEngine(host: Swift.String, port: Swift.Int) -> Swift.Result<Foundation.URLComponents, Foundation.NSError>
  public static func externalRuntimeIsActivated() -> Swift.Bool
  @available(*, deprecated, renamed: "externalRuntimeIsActivated")
  public static func externalEdgeEngineIsActivated() -> Swift.Bool
  public static func deactivateExternalRuntime() throws
  @available(*, deprecated, renamed: "deactivateExternalRuntime")
  public static func deactivateExternalEdgeEngine() -> Swift.Result<Swift.Void, Foundation.NSError>
  public static func deployMicroservice(accessToken: Swift.String, config: EdgeCore.EdgeClient.Microservice.Config, imageTarPath: Swift.String) async -> Swift.Result<EdgeCore.EdgeClient.Microservice, Foundation.NSError>
  @available(*, deprecated, renamed: "deployMicroservice(accessToken:config:imageTarPath:)")
  final public func deployMicroservice(edgeEngineAccessToken: Swift.String, config: EdgeCore.EdgeClient.Microservice.Config, imageTarPath: Swift.String) async -> Swift.Result<EdgeCore.EdgeClient.Microservice, Foundation.NSError>
  public static func deployImage(accessToken: Swift.String, imageTarPath: Swift.String) async -> Swift.Result<EdgeCore.EdgeClient.Microservice.NewImage, Foundation.NSError>
  @available(*, deprecated, renamed: "deployImage(accessToken:imageTarPath:)")
  final public func deployImage(accessToken: Swift.String, imageTarPath: Swift.String) async -> Swift.Result<EdgeCore.EdgeClient.Microservice.NewImage, Foundation.NSError>
  public static func deployContainer(accessToken: Swift.String, config: EdgeCore.EdgeClient.Microservice.Config) async -> Swift.Result<EdgeCore.EdgeClient.Microservice.NewContainer, Foundation.NSError>
  @available(*, deprecated, renamed: "deployContainer(accessToken:config:)")
  final public func deployContainer(accessToken: Swift.String, config: EdgeCore.EdgeClient.Microservice.Config) async -> Swift.Result<EdgeCore.EdgeClient.Microservice.NewContainer, Foundation.NSError>
  public static func deployUseCase(accessToken: Swift.String, configUrl: Swift.String, dynamicConfig: [EdgeCore.EdgeClient.Microservice.DynamicConfig]) async -> Swift.Result<EdgeCore.EdgeClient.UseCase, Foundation.NSError>
  public static func deployUseCase(accessToken: Swift.String, config: EdgeCore.EdgeClient.UseCase, dynamicConfig: [EdgeCore.EdgeClient.Microservice.DynamicConfig]) async -> Swift.Result<EdgeCore.EdgeClient.UseCase, Foundation.NSError>
  @available(*, deprecated, message: "use microservice instance function updateEnv(accessToken:envVariables:)")
  final public func updateMicroserviceEnv(edgeEngineAccessToken: Swift.String, microservice: EdgeCore.EdgeClient.Microservice, envVariables: [Swift.String : Swift.String]) async -> Swift.Result<EdgeCore.EdgeClient.Microservice, Foundation.NSError>
  public static func undeployMicroservice(accessToken: Swift.String, microservice: EdgeCore.EdgeClient.Microservice) async throws
  @available(*, deprecated, renamed: "undeployMicroservice(accessToken:microservice:)")
  final public func undeployMicroservice(edgeEngineAccessToken: Swift.String, microservice: EdgeCore.EdgeClient.Microservice) async -> Swift.Result<Swift.Void, Foundation.NSError>
  public static func microservices(accessToken: Swift.String) async -> Swift.Result<[EdgeCore.EdgeClient.Microservice], Foundation.NSError>
  @available(*, deprecated, renamed: "microservices(accessToken:)")
  final public func microservices(edgeEngineAccessToken: Swift.String) async -> Swift.Result<[EdgeCore.EdgeClient.Microservice], Foundation.NSError>
  public static func microservice(containerName: Swift.String, accessToken: Swift.String) async -> Swift.Result<EdgeCore.EdgeClient.Microservice, Foundation.NSError>
  @available(*, deprecated, renamed: "microservice(containerName:accessToken:)")
  final public func microservice(containerName: Swift.String, edgeEngineAccessToken: Swift.String) async -> Swift.Result<EdgeCore.EdgeClient.Microservice, Foundation.NSError>
  public static func runtimeIdToken() async -> Swift.Result<Swift.String, Foundation.NSError>
  @available(*, deprecated, renamed: "runtimeIdToken")
  final public func edgeEngineIdToken() async -> Swift.Result<Swift.String, Foundation.NSError>
  public static func runtimeInfo() async -> Swift.Result<SwiftyJSON.JSON, Foundation.NSError>
  @available(*, deprecated, renamed: "runtimeInfo")
  final public func edgeEngineInfo() async -> Swift.Result<SwiftyJSON.JSON, Foundation.NSError>
  public static func externalRuntimeIsRunning() async -> Swift.Bool
  @available(*, deprecated, renamed: "externalRuntimeIsRunning")
  final public func externalEdgeEngineIsRunning() async -> Swift.Bool
  public static func runtimeFullPathUrl() -> Foundation.URLComponents
  @available(*, deprecated, renamed: "runtimeFullPathUrl")
  final public func edgeEngineFullPathUrl() -> Foundation.URLComponents
  @objc override dynamic public init()
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension EdgeCore.EdgeClient {
  public enum JSONValue : Swift.Codable, Swift.Equatable, Swift.Sendable, Swift.Hashable {
    case string(Swift.String)
    case integer(Swift.Int)
    case double(Swift.Double)
    case bool(Swift.Bool)
    case object([Swift.String : EdgeCore.EdgeClient.JSONValue])
    case array([EdgeCore.EdgeClient.JSONValue])
    case null
    public init(from decoder: any Swift.Decoder) throws
    public static func == (a: EdgeCore.EdgeClient.JSONValue, b: EdgeCore.EdgeClient.JSONValue) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension EdgeCore.EdgeClient.AI {
  public struct ServiceIntegration {
    public var service: EdgeCore.EdgeClient.AI.ServiceConfiguration
    public var useCase: EdgeCore.EdgeClient.UseCase
  }
  public struct ServiceConfiguration : Swift.Identifiable, Swift.Hashable {
    public let kind: EdgeCore.EdgeClient.AI.ServiceConfiguration.Kind
    public let model: EdgeCore.EdgeClient.AI.Model?
    public let apiKey: Swift.String?
    public let mimOEPort: Swift.Int?
    public let mimOEClientId: Swift.String?
    public init(kind: EdgeCore.EdgeClient.AI.ServiceConfiguration.Kind, model: EdgeCore.EdgeClient.AI.Model?, apiKey: Swift.String?, mimOEPort: Swift.Int?, mimOEClientId: Swift.String?)
    public enum Kind : Swift.String {
      case gemini
      case mimikAI
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public var id: Swift.String {
      get
    }
    public var modelId: Swift.String? {
      get
    }
    public func endpoint() -> EdgeCore.EdgeClient.AI.ServiceConfiguration.Endpoint?
    public static func == (a: EdgeCore.EdgeClient.AI.ServiceConfiguration, b: EdgeCore.EdgeClient.AI.ServiceConfiguration) -> Swift.Bool
    public typealias ID = Swift.String
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension Swift.Array where Element == EdgeCore.EdgeClient.AI.ServiceConfiguration {
  public mutating func addOrReplace(_ newConfig: Element)
}
extension EdgeCore.EdgeClient {
  public static func authorizeUser(email: Swift.String, password: Swift.String, idToken: Swift.String, service: EdgeCore.EdgeClient.Service) async -> Swift.Result<EdgeCore.EdgeClient.Authorization, Foundation.NSError>
  @available(*, deprecated, renamed: "authorizeUser(email:password:idToken:service:)")
  final public func authorizeUser(email: Swift.String, password: Swift.String, edgeEngineIdToken: Swift.String, service: EdgeCore.EdgeClient.Service) async -> Swift.Result<EdgeCore.EdgeClient.Authorization, Foundation.NSError>
}
extension EdgeCore.EdgeClient.AI.Model {
  public struct WarmupRequest : Swift.Codable, Swift.Sendable {
    public let modelId: Swift.String
    public let accessToken: Swift.String
    public let apiKey: Swift.String
    public let useCase: EdgeCore.EdgeClient.UseCase
    public init(modelId: Swift.String, accessToken: Swift.String, apiKey: Swift.String, useCase: EdgeCore.EdgeClient.UseCase)
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension Swift.Encodable {
  public var dictionary: [Swift.String : any Swift.Sendable]? {
    get
  }
  public func json() -> SwiftyJSON.JSON?
  public func jsonString() -> Swift.String?
  public func jsonData() -> Foundation.Data?
  public func encoded() throws -> Foundation.Data
}
extension EdgeCore.EdgeClient {
  public struct Microservice : Swift.Codable, Swift.Sendable {
    public enum Component : Swift.String, Swift.Codable, Swift.Sendable {
      case image
      case container
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public var container: EdgeCore.EdgeClient.Microservice.Container?
    public var image: EdgeCore.EdgeClient.Microservice.Image?
    public init(image: EdgeCore.EdgeClient.Microservice.Image, container: EdgeCore.EdgeClient.Microservice.Container)
    public struct DynamicConfig : Swift.Codable, Swift.Sendable {
      public var name: Swift.String
      public var values: [Swift.String : Swift.String]
      public init(name: Swift.String, values: [Swift.String : Swift.String])
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public func urlComponents() -> Foundation.URLComponents?
    public func urlComponents(withEndpoint endpoint: Swift.String) -> Foundation.URLComponents?
    public func basePath() -> Swift.String?
    public func updateEnv(accessToken: Swift.String, envVariables: [Swift.String : Swift.String]) async -> Swift.Result<EdgeCore.EdgeClient.Microservice, Foundation.NSError>
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.EdgeClient {
  public struct AI {
  }
}
extension EdgeCore.EdgeClient.Microservice {
  public struct Request : Swift.Codable, Swift.Sendable {
    public struct Config : Swift.Sendable {
      public let path: Swift.String
      public let method: Alamofire.HTTPMethod
      public let queryItems: [Foundation.URLQueryItem]?
      public let authorization: EdgeCore.EdgeClient.Authorization?
      public let httpBody: Alamofire.Parameters?
      public let httpHeaders: Alamofire.HTTPHeaders?
      public let dataKey: Swift.String?
      public init?(path: Swift.String, method: Alamofire.HTTPMethod, queryItems: [Foundation.URLQueryItem]?, authorization: EdgeCore.EdgeClient.Authorization?, httpBody: Alamofire.Parameters?, httpHeaders: Alamofire.HTTPHeaders?, dataKey: Swift.String?)
    }
    public static func microserviceRequest(microservice: EdgeCore.EdgeClient.Microservice, path: Swift.String, method: Alamofire.HTTPMethod, queryItems: [Foundation.URLQueryItem]?, authorization: EdgeCore.EdgeClient.Authorization?, httpBody: Alamofire.Parameters?, httpHeaders: Alamofire.HTTPHeaders? = nil, timeoutInterval: Foundation.TimeInterval? = nil, cachePolicy: Foundation.URLRequest.CachePolicy? = nil) -> Swift.Result<Foundation.URLRequest, Foundation.NSError>
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.EdgeClient.AI.Model {
  public struct CompletionRequest : Swift.Codable, Swift.Sendable, Swift.Hashable {
    public var model: Swift.String
    public var messages: [EdgeCore.EdgeClient.AI.Model.Message]
    public init(model: Swift.String, messages: [EdgeCore.EdgeClient.AI.Model.Message])
    public static func == (a: EdgeCore.EdgeClient.AI.Model.CompletionRequest, b: EdgeCore.EdgeClient.AI.Model.CompletionRequest) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.EdgeClient.AI.Model {
  public struct Message : Swift.Codable, Swift.Sendable, Swift.Hashable {
    public var role: Swift.String?
    public var content: Swift.String?
    public var thumbnailBase64: Swift.String?
    public var modelId: Swift.String?
    public init(role: Swift.String? = nil, content: Swift.String? = nil, thumbnailBase64: Swift.String? = nil, modelId: Swift.String? = nil)
    public var isAiType: Swift.Bool {
      get
    }
    public var isUserType: Swift.Bool {
      get
    }
    public enum MessageType : Swift.Codable, Swift.Sendable, Swift.Hashable {
      case user
      case assistant
      case system
      case unknown
      public init(rawValue: Swift.String)
      public var isAiType: Swift.Bool {
        get
      }
      public var isUserType: Swift.Bool {
        get
      }
      public static func == (a: EdgeCore.EdgeClient.AI.Model.Message.MessageType, b: EdgeCore.EdgeClient.AI.Model.Message.MessageType) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public static func == (a: EdgeCore.EdgeClient.AI.Model.Message, b: EdgeCore.EdgeClient.AI.Model.Message) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.EdgeClient.Service {
  public struct VersionCheck : Swift.Codable, Swift.Sendable {
    public enum Result : Swift.String, Swift.Codable, Swift.Sendable {
      case unknown
      case expected
      case unexpectedWarning
      case unexpectedFailure
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public let result: EdgeCore.EdgeClient.Service.VersionCheck.Result
    public let message: Swift.String
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.EdgeClient.AI.Model {
  public struct CreateModelRequest : Swift.Codable, Swift.Sendable, Swift.Hashable {
    public enum ChatTemplateHint : Swift.String, Swift.Codable, Swift.Sendable, Swift.Hashable {
      case chatml
      case llama2
      case llama2Sys
      case llama2SysBos
      case llama2SysStrip
      case mistralV1
      case mistralV3
      case mistralV3Tekken
      case mistralV7
      case phi3
      case falcon3
      case zephyr
      case monarch
      case gemma
      case orion
      case openchat
      case vicuna
      case vicunaOrca
      case deepseek
      case deepseek2
      case deepseek3
      case commandR
      case llama3
      case chatglm3
      case chatglm4
      case minicpm
      case exaone3
      case rwkvWorld
      case granite
      case gigachat
      case megrez
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public var id: Swift.String
    public var object: Swift.String
    public var kind: EdgeCore.EdgeClient.AI.Model.Kind?
    public var chatTemplateHint: EdgeCore.EdgeClient.AI.Model.CreateModelRequest.ChatTemplateHint?
    public var url: Swift.String
    public var mmprojUrl: Swift.String?
    public var ownedBy: Swift.String?
    public var expectedDownloadSize: Swift.Int64
    public var excludeFromBackup: Swift.Bool?
    public init(id: Swift.String, object: Swift.String, url: Swift.String, expectedDownloadSize: Swift.Int64, kind: EdgeCore.EdgeClient.AI.Model.Kind? = .llm, chatTemplateHint: EdgeCore.EdgeClient.AI.Model.CreateModelRequest.ChatTemplateHint? = nil, mmprojUrl: Swift.String? = nil, ownedBy: Swift.String? = nil, excludeFromBackup: Swift.Bool? = true)
    public static func == (a: EdgeCore.EdgeClient.AI.Model.CreateModelRequest, b: EdgeCore.EdgeClient.AI.Model.CreateModelRequest) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.EdgeClient.Microservice {
  public func call(config: EdgeCore.EdgeClient.Microservice.Request.Config, requestHandler: ((_ request: Alamofire.DataTask<Foundation.Data>) -> Swift.Void)? = nil) async -> Swift.Result<Foundation.Data, Foundation.NSError>
  public func call<T>(config: EdgeCore.EdgeClient.Microservice.Request.Config, type: T.Type, requestHandler: ((_ request: Alamofire.DataTask<Foundation.Data>) -> Swift.Void)? = nil) async -> Swift.Result<T, Foundation.NSError> where T : Swift.Decodable, T : Swift.Encodable
  public func callMultipartFormData(config: EdgeCore.EdgeClient.Microservice.Request.Config, name: Swift.String, mimeType: Swift.String, data: Foundation.Data, requestHandler: ((_ request: Alamofire.DataTask<Foundation.Data>) -> Swift.Void)? = nil) async -> Swift.Result<Foundation.Data, Foundation.NSError>
  public func callMultipartFormData<T>(config: EdgeCore.EdgeClient.Microservice.Request.Config, name: Swift.String, mimeType: Swift.String, data: Foundation.Data, type: T.Type, requestHandler: ((_ request: Alamofire.DataTask<Foundation.Data>) -> Swift.Void)? = nil) async -> Swift.Result<T, Foundation.NSError> where T : Swift.Decodable, T : Swift.Encodable
}
extension EdgeCore.EdgeClient.Microservice {
  public enum ServerSentEventType : Swift.Codable, Swift.Sendable {
    case empty
    case comment(Swift.String)
    case event(Swift.String)
    case data(Swift.String)
    case id(Swift.String)
    case retry(Swift.String)
    case other
    case unknown
    case error(Swift.String, Swift.Int)
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public func callStreamSSE(config: EdgeCore.EdgeClient.Microservice.Request.Config, streamHandler: @escaping (_ stream: Swift.Result<EdgeCore.EdgeClient.Microservice.ServerSentEventType, Foundation.NSError>) -> Swift.Void, requestHandler: @escaping (_ request: Alamofire.DataStreamRequest) -> Swift.Void) async -> Swift.Result<Alamofire.DataStreamRequest.Completion, Foundation.NSError>
}
extension EdgeCore.EdgeClient {
  public struct Log : Swift.Codable, Swift.Sendable {
    public enum Level : Swift.Int, Swift.Codable, Swift.Sendable {
      case debug
      case info
      case error
      case fault
      case off
      public init?(rawValue: Swift.Int)
      public typealias RawValue = Swift.Int
      public var rawValue: Swift.Int {
        get
      }
    }
    public enum Privacy : Swift.Int, Swift.Codable, Swift.Sendable {
      case privateOnly
      case publicAccess
      public init?(rawValue: Swift.Int)
      public typealias RawValue = Swift.Int
      public var rawValue: Swift.Int {
        get
      }
    }
    public enum Module : Swift.Codable, Swift.Sendable {
      case custom(Swift.String)
      case mimikCore
      @available(*, deprecated, renamed: "mimikCore")
      case edgeCore
      case mimikRuntime
      @available(*, deprecated, renamed: "mimikRuntime")
      case edgeEngine
      case mimikService
      @available(*, deprecated, renamed: "mimikService")
      case edgeService
      case mimikApps
      @available(*, deprecated, renamed: "mimikApps")
      case mimikAccess
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public static func loggingLevel(module: EdgeCore.EdgeClient.Log.Module) -> EdgeCore.EdgeClient.Log.Level
    public static func loggingPrivacy(module: EdgeCore.EdgeClient.Log.Module) -> EdgeCore.EdgeClient.Log.Privacy
    public static func log(level: EdgeCore.EdgeClient.Log.Level, function: Swift.String, line: Swift.Int, items: Any..., module: EdgeCore.EdgeClient.Log.Module)
    public static func logInfo(function: Swift.String, line: Swift.Int, items: Any..., module: EdgeCore.EdgeClient.Log.Module)
    public static func logDebug(function: Swift.String, line: Swift.Int, items: Any..., module: EdgeCore.EdgeClient.Log.Module)
    public static func logFault(function: Swift.String, line: Swift.Int, items: Any..., module: EdgeCore.EdgeClient.Log.Module)
    public static func logError(function: Swift.String, line: Swift.Int, items: Any..., module: EdgeCore.EdgeClient.Log.Module)
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.EdgeClient.AI.Model {
  public struct Usage : Swift.Codable, Swift.Sendable, Swift.Hashable {
    public var promptTokens: Swift.Int?
    public var completionTokens: Swift.Int?
    public var totalTokens: Swift.Int?
    public var tokenPerSecond: Swift.Float?
    public init(promptTokens: Swift.Int? = nil, completionTokens: Swift.Int? = nil, totalTokens: Swift.Int? = nil, tokenPerSecond: Swift.Float? = nil)
    public static func == (a: EdgeCore.EdgeClient.AI.Model.Usage, b: EdgeCore.EdgeClient.AI.Model.Usage) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.EdgeClient.Authorization {
  public struct AccessToken : Swift.Codable, Swift.Sendable {
    public var accessToken: Swift.String? {
      get
    }
    public var refreshToken: Swift.String? {
      get
    }
    public var scope: Swift.String? {
      get
    }
    public var tokenType: Swift.String? {
      get
    }
    public var expiresIn: Foundation.Date? {
      get
    }
    public var idToken: Swift.String? {
      get
    }
    public init(accessToken: Swift.String? = nil, refreshToken: Swift.String? = nil, scope: Swift.String? = nil, tokenType: Swift.String? = nil, expiresIn: Foundation.Date? = nil, idToken: Swift.String? = nil)
    public func validate() throws
    public func decodeToJWT() -> (any JWTDecode.JWT)?
    public func decodeToJson() -> SwiftyJSON.JSON?
    public func subscriber() -> Swift.String?
    public func clientId() -> Swift.String?
    public func valueFrom(key: Swift.String) -> Swift.String?
    public static func validate(token: Swift.String) throws
    public static func decodeToJWT(token: Swift.String) -> (any JWTDecode.JWT)?
    public static func decodeToJson(token: Swift.String) -> SwiftyJSON.JSON?
    public static func subscriber(token: Swift.String) -> Swift.String?
    public static func expiresIn(token: Swift.String) -> Foundation.Date?
    public static func clientId(token: Swift.String) -> Swift.String?
    public static func valueFrom(token: Swift.String, key: Swift.String) -> Swift.String?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.EdgeClient.Request {
  public static func uploadContent(sourceFileUrl: Foundation.URL, destinationUrl: Foundation.URL, mimeType: Swift.String, progressHandler: @escaping EdgeCore.EdgeClient.Request.ProgressHandler) async throws
  @available(*, deprecated, renamed: "uploadContent(sourceFileUrl:destinationUrl:mimeType:progressHandler:)")
  public static func uploadContent(sourceFileUrl: Foundation.URL, destinationUrl: Foundation.URL, mimeType: Swift.String, progressHandler: @escaping EdgeCore.EdgeClient.Request.ProgressHandler) async -> Swift.Result<Swift.Void, Foundation.NSError>
  public static func downloadContent(sourceUrl: Foundation.URL, destinationFileUrl: Foundation.URL, progressHandler: @escaping EdgeCore.EdgeClient.Request.ProgressHandler) async throws
  @available(*, deprecated, renamed: "downloadContent(sourceUrl:destinationFileUrl:progressHandler:)")
  public static func downloadContent(sourceUrl: Foundation.URL, destinationFileUrl: Foundation.URL, progressHandler: @escaping EdgeCore.EdgeClient.Request.ProgressHandler) async -> Swift.Result<Swift.Void, Foundation.NSError>
  public static func downloadImageContent(sourceUrl: Foundation.URL) async -> Swift.Result<UIKit.UIImage, Foundation.NSError>
}
extension EdgeCore.EdgeClient {
  public struct ImageResizeOptions {
    public var size: CoreFoundation.CGSize
    public var compressionQuality: CoreFoundation.CGFloat
    public var bytesLimit: Swift.Int?
    public init(size: CoreFoundation.CGSize, compressionQuality: CoreFoundation.CGFloat, bytesLimit: Swift.Int? = nil)
  }
}
extension EdgeCore.EdgeClient.Request {
  public struct Config : Swift.Sendable {
    public let service: EdgeCore.EdgeClient.Service
    public let path: Swift.String
    public let method: Alamofire.HTTPMethod
    public let queryItems: [Foundation.URLQueryItem]?
    public let authorization: EdgeCore.EdgeClient.Authorization?
    public let httpBody: Alamofire.Parameters?
    public let httpHeaders: Alamofire.HTTPHeaders?
    public let pagingHandler: EdgeCore.EdgeClient.Request.PagingInfoHandler?
    public init(service: EdgeCore.EdgeClient.Service, path: Swift.String, method: Alamofire.HTTPMethod, queryItems: [Foundation.URLQueryItem]?, authorization: EdgeCore.EdgeClient.Authorization?, httpBody: Alamofire.Parameters?, httpHeaders: Alamofire.HTTPHeaders? = nil, pagingHandler: EdgeCore.EdgeClient.Request.PagingInfoHandler? = nil)
  }
}
extension EdgeCore.EdgeClient {
  @available(*, deprecated, renamed: "RuntimeParameters")
  public typealias StartupParameters = EdgeCore.EdgeClient.RuntimeParameters
  public struct RuntimeParameters : Swift.Codable, Swift.Sendable {
    public var license: Swift.String
    public var logLevel: EdgeCore.EdgeClient.RuntimeParameters.LogLevel
    public var nodeInfoLevel: EdgeCore.EdgeClient.RuntimeParameters.NodeInfoLevel
    public var nodeName: Swift.String
    public var localDiscovery: EdgeCore.EdgeClient.RuntimeParameters.LocalDiscovery
    public var logFileDir: Swift.String?
    public enum LogLevel : Swift.String, Swift.Codable, Swift.Sendable {
      case trace
      case debug
      case info
      case warn
      case error
      case critical
      case off
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public enum NodeInfoLevel : Swift.String, Swift.Codable, Swift.Sendable {
      case on
      case off
      case name
      case hwInfoOnly
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public enum LocalDiscovery : Swift.String, Swift.Codable, Swift.Sendable {
      case on
      case off
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public init(license: Swift.String, logLevel: EdgeCore.EdgeClient.RuntimeParameters.LogLevel = .error, nodeInfoLevel: EdgeCore.EdgeClient.RuntimeParameters.NodeInfoLevel = .off, nodeName: Swift.String = UIDevice.current.name + "-" + UIDevice.current.model, localDiscovery: EdgeCore.EdgeClient.RuntimeParameters.LocalDiscovery = .off, logFileDir: Swift.String? = nil)
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.EdgeClient {
  public static func passwordChange(email: Swift.String, currentPassword: Swift.String, newPassword: Swift.String, idToken: Swift.String, service: EdgeCore.EdgeClient.Service) async -> Swift.Result<EdgeCore.EdgeClient.Authorization, Foundation.NSError>
  @available(*, deprecated, renamed: "passwordChange(email:currentPassword:newPassword:idToken:service:)")
  final public func passwordChange(email: Swift.String, currentPassword: Swift.String, newPassword: Swift.String, edgeEngineIdToken: Swift.String, service: EdgeCore.EdgeClient.Service) async -> Swift.Result<EdgeCore.EdgeClient.Authorization, Foundation.NSError>
}
extension EdgeCore.EdgeClient {
  public struct AuthUserData : Swift.Codable, Swift.Sendable {
    public let data: EdgeCore.EdgeClient.AuthUser?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct AuthUser : Swift.Codable, Swift.Sendable {
    public var userId: Swift.String?
    public var email: Swift.String?
    public var phoneNumber: Swift.String?
    public var roles: [Swift.String]?
    public var identities: EdgeCore.EdgeClient.JSONValue?
    public init(userId: Swift.String?, email: Swift.String?, phoneNumber: Swift.String?, roles: [Swift.String]?, identities: EdgeCore.EdgeClient.JSONValue?)
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.EdgeClient.Microservice {
  public func callStream(config: EdgeCore.EdgeClient.Microservice.Request.Config, streamHandler: @escaping (_ stream: Swift.Result<Foundation.Data, Foundation.NSError>) -> Swift.Void, requestHandler: @escaping (_ request: Alamofire.DataStreamRequest) -> Swift.Void) async -> Swift.Result<Alamofire.DataStreamRequest.Completion, Foundation.NSError>
  public func callStream<T>(config: EdgeCore.EdgeClient.Microservice.Request.Config, type: T.Type, streamHandler: @escaping (_ stream: Swift.Result<T, Foundation.NSError>) -> Swift.Void, requestHandler: @escaping (_ request: Alamofire.DataStreamRequest) -> Swift.Void) async -> Swift.Result<Alamofire.DataStreamRequest.Completion, Foundation.NSError> where T : Swift.Decodable, T : Swift.Encodable
}
extension EdgeCore.EdgeClient.AI.Model {
  public struct Choice : Swift.Codable, Swift.Sendable, Swift.Hashable {
    public var index: Swift.Int?
    public var delta: EdgeCore.EdgeClient.AI.Model.Message?
    public var message: EdgeCore.EdgeClient.AI.Model.Message?
    public var logprobs: EdgeCore.EdgeClient.JSONValue?
    public var finishReason: Swift.String?
    public init(index: Swift.Int? = nil, delta: EdgeCore.EdgeClient.AI.Model.Message? = nil, message: EdgeCore.EdgeClient.AI.Model.Message? = nil, logprobs: EdgeCore.EdgeClient.JSONValue? = nil, finishReason: Swift.String? = nil)
    public static func == (a: EdgeCore.EdgeClient.AI.Model.Choice, b: EdgeCore.EdgeClient.AI.Model.Choice) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.EdgeClient {
  public struct Document : Swift.Codable, Swift.Sendable {
    public static func uttypeFor(filenameExtension: Swift.String) -> UniformTypeIdentifiers.UTType?
    public static func uttypeFor(mimeType: Swift.String) -> UniformTypeIdentifiers.UTType?
    public static func filenameExtensionFor(type: UniformTypeIdentifiers.UTType) -> Swift.String?
    public static func filenameExtentionFor(mimeType: Swift.String) -> Swift.String?
    public static func mimeTypeFor(type: UniformTypeIdentifiers.UTType) -> Swift.String?
    public static func mimeTypeFor(filenameExtension: Swift.String) -> Swift.String?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.EdgeClient {
  public static func authorizeDeveloper(developerIdToken: Swift.String, runtimeIdToken: Swift.String?) async -> Swift.Result<EdgeCore.EdgeClient.Authorization, Foundation.NSError>
  @available(*, deprecated, renamed: "authorizeDeveloper(developerIdToken:runtimeIdToken:)")
  final public func authorizeDeveloper(developerIdToken: Swift.String, edgeEngineIdToken: Swift.String? = nil) async -> Swift.Result<EdgeCore.EdgeClient.Authorization, Foundation.NSError>
}
extension EdgeCore.EdgeClient {
  public static func passwordReset(email: Swift.String, idToken: Swift.String, service: EdgeCore.EdgeClient.Service) async -> Swift.Result<EdgeCore.EdgeClient.Authorization, Foundation.NSError>
  @available(*, deprecated, renamed: "passwordReset(email:idToken:service:)")
  final public func passwordReset(email: Swift.String, edgeEngineIdToken: Swift.String, service: EdgeCore.EdgeClient.Service) async -> Swift.Result<EdgeCore.EdgeClient.Authorization, Foundation.NSError>
  public static func validatePasswordReset(codes: EdgeCore.EdgeClient.Authorization.ValidationCodes, newPassword: Swift.String, idToken: Swift.String, service: EdgeCore.EdgeClient.Service) async -> Swift.Result<EdgeCore.EdgeClient.Authorization, Foundation.NSError>
  @available(*, deprecated, renamed: "validatePasswordReset(codes:newPassword:idToken:service:)")
  final public func validatePasswordReset(codes: EdgeCore.EdgeClient.Authorization.ValidationCodes, newPassword: Swift.String, edgeEngineIdToken: Swift.String, service: EdgeCore.EdgeClient.Service) async -> Swift.Result<EdgeCore.EdgeClient.Authorization, Foundation.NSError>
}
extension EdgeCore.EdgeClient.Service {
  public struct HealthCheckData : Swift.Codable, Swift.Sendable {
    public let data: EdgeCore.EdgeClient.Service.HealthCheck?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct HealthCheck : Swift.Codable, Swift.Sendable {
    public struct ClusterStatus : Swift.Codable, Swift.Sendable {
      public let nbServers: Swift.String?
      public let updatedAt: Foundation.Date?
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct GitRepo : Swift.Codable, Swift.Sendable {
      public let branch: Swift.String?
      public let hashKey: Swift.String?
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Deployment : Swift.Codable, Swift.Sendable {
      public let gitRepo: EdgeCore.EdgeClient.Service.HealthCheck.GitRepo?
      public let time: Swift.String?
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Address : Swift.Codable, Swift.Sendable {
      public let local: Swift.String?
      public let addressPublic: Swift.String?
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct MemoryUsage : Swift.Codable, Swift.Sendable {
      public let xternal: Swift.Int?
      public let rss: Swift.Int?
      public let arrayBuffers: Swift.Int?
      public let heapUsed: Swift.Int?
      public let heapTotal: Swift.Int?
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct CPUUsage : Swift.Codable, Swift.Sendable {
      public let user: Swift.Int?
      public let system: Swift.Int?
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Location : Swift.Codable, Swift.Sendable {
      public let type: Swift.String?
      public let coordinates: [Swift.Double]?
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public let swaggerFileVersion: Swift.String?
    public let type: Swift.String?
    public let uptime: Foundation.Decimal?
    public let version: Swift.String?
    public let registrationStatus: Swift.String?
    public let port: Swift.String?
    public let platform: Swift.String?
    public let pidValue: Swift.Int?
    public let nodeVersion: Swift.String?
    public let name: Swift.String?
    public let memoryUsage: EdgeCore.EdgeClient.Service.HealthCheck.MemoryUsage?
    public let location: EdgeCore.EdgeClient.Service.HealthCheck.Location?
    public let id: Swift.String?
    public let environment: Swift.String?
    public let deployment: EdgeCore.EdgeClient.Service.HealthCheck.Deployment?
    public let cpuUsage: EdgeCore.EdgeClient.Service.HealthCheck.CPUUsage?
    public let clusterStatus: EdgeCore.EdgeClient.Service.HealthCheck.ClusterStatus?
    public let addresses: [EdgeCore.EdgeClient.Service.HealthCheck.Address]?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.EdgeClient.Request {
  public typealias PagingInfoHandler = @Sendable (_ paging: EdgeCore.EdgeClient.Request.PagingInfo?) -> Swift.Void
  public typealias ProgressHandler = @Sendable (_ progress: Foundation.Progress) -> Swift.Void
  public struct PagingInfo : Swift.Codable, Swift.Sendable {
    public let count: Swift.Int
    public let startAfter: Swift.String
    public init(count: Swift.Int, startAfter: Swift.String)
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.EdgeClient {
  public struct Authorization : Swift.Codable, Swift.Sendable {
    public var token: EdgeCore.EdgeClient.Authorization.AccessToken? {
      get
    }
    public var validationCodes: EdgeCore.EdgeClient.Authorization.ValidationCodes? {
      get
    }
    public init(token: EdgeCore.EdgeClient.Authorization.AccessToken)
    public init(validationCodes: EdgeCore.EdgeClient.Authorization.ValidationCodes)
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.EdgeClient {
  public static func authorizeUser(phoneNumber: Swift.String, idToken: Swift.String, service: EdgeCore.EdgeClient.Service) async -> Swift.Result<EdgeCore.EdgeClient.Authorization, Foundation.NSError>
  @available(*, deprecated, renamed: "authorizedUser(phoneNumber:idToken:service:)")
  final public func authorizeUser(phoneNumber: Swift.String, edgeEngineIdToken: Swift.String, service: EdgeCore.EdgeClient.Service) async -> Swift.Result<EdgeCore.EdgeClient.Authorization, Foundation.NSError>
  public static func validateUser(codes: EdgeCore.EdgeClient.Authorization.ValidationCodes, idToken: Swift.String, service: EdgeCore.EdgeClient.Service) async -> Swift.Result<EdgeCore.EdgeClient.Authorization, Foundation.NSError>
  @available(*, deprecated, renamed: "validateUser(codes:idToken:service:)")
  final public func validateUser(codes: EdgeCore.EdgeClient.Authorization.ValidationCodes, edgeEngineIdToken: Swift.String, service: EdgeCore.EdgeClient.Service) async -> Swift.Result<EdgeCore.EdgeClient.Authorization, Foundation.NSError>
}
public typealias ClientRuntime = EdgeCore.EdgeEngineClient
public protocol EdgeEngineClient {
  static func configureRuntimePort(to port: Swift.Int32) throws
  @available(*, deprecated, renamed: "configureRuntimePort(to:)")
  static func setCustomPort(number: Swift.Int32) -> Swift.Result<Swift.Void, Foundation.NSError>
  static func expectedRuntimeVersion() -> Swift.String
  @available(*, deprecated, renamed: "expectedRuntimeVersion")
  static func expectedEdgeEngineVersion() -> Swift.String
  static func manageRuntimeLifecycle(manage: Swift.Bool) throws
  @available(*, deprecated, renamed: "manageRuntimeLifecycle")
  static func manageEdgeEngineLifecycle(manage: Swift.Bool) -> Swift.Result<Swift.Void, Foundation.NSError>
  static func startRuntime(parameters: EdgeCore.EdgeClient.RuntimeParameters) async throws
  @available(*, deprecated, renamed: "startRuntime")
  func startEdgeEngine(parameters: EdgeCore.EdgeClient.StartupParameters) async -> Swift.Result<Swift.Void, Foundation.NSError>
  static func stopRuntime()
  @available(*, deprecated, renamed: "stopRuntime")
  func stopEdgeEngine()
  static func restartRuntime() async throws
  @available(*, deprecated, renamed: "restartRuntime")
  func restartEdgeEngine() async -> Swift.Result<Swift.Void, Foundation.NSError>
  static func resetRuntime() throws
  @available(*, deprecated, renamed: "resetRuntime")
  func resetEdgeEngine() -> Swift.Result<Swift.Void, Foundation.NSError>
  static func runtimeIsRunning() -> Swift.Bool
  @available(*, deprecated, renamed: "runtimeIsRunning")
  func edgeEngineIsRunning() -> Swift.Bool
  static func runtimeParameters() -> EdgeCore.EdgeClient.RuntimeParameters?
  @available(*, deprecated, renamed: "runtimeParameters")
  func edgeEngineParameters() -> EdgeCore.EdgeClient.StartupParameters?
  static func runtimeLifecycleIsManaged() -> Swift.Bool
  @available(*, deprecated, renamed: "runtimeLifecycleIsManaged")
  func edgeEngineLifecycleIsManaged() -> Swift.Bool
}
extension EdgeCore.EdgeClient {
  public static func signup(email: Swift.String, password: Swift.String, idToken: Swift.String, service: EdgeCore.EdgeClient.Service) async -> Swift.Result<EdgeCore.EdgeClient.Authorization, Foundation.NSError>
  @available(*, deprecated, renamed: "signup(email:password:idToken:service:)")
  final public func signup(email: Swift.String, password: Swift.String, edgeEngineIdToken: Swift.String, service: EdgeCore.EdgeClient.Service) async -> Swift.Result<EdgeCore.EdgeClient.Authorization, Foundation.NSError>
  public static func validateSignup(codes: EdgeCore.EdgeClient.Authorization.ValidationCodes, password: Swift.String, idToken: Swift.String, service: EdgeCore.EdgeClient.Service) async -> Swift.Result<EdgeCore.EdgeClient.Authorization, Foundation.NSError>
  @available(*, deprecated, renamed: "validateSignup(codes:password:idToken:service:)")
  final public func validateSignup(codes: EdgeCore.EdgeClient.Authorization.ValidationCodes, password: Swift.String, edgeEngineIdToken: Swift.String, service: EdgeCore.EdgeClient.Service) async -> Swift.Result<EdgeCore.EdgeClient.Authorization, Foundation.NSError>
}
extension EdgeCore.EdgeClient {
  final public class func runtimeWorkingDirectory() -> Foundation.URL?
  @available(*, deprecated, renamed: "runtimeWorkingDirectory")
  final public class func edgeEngineWorkingDirectory() -> Foundation.URL?
}
extension EdgeCore.EdgeClient {
  public static func initiateAccountDeletion(email: Swift.String, password: Swift.String, idToken: Swift.String, service: EdgeCore.EdgeClient.Service) async -> Swift.Result<EdgeCore.EdgeClient.Authorization, Foundation.NSError>
  @available(*, deprecated, renamed: "initiateAccountDeletion(email:password:idToken:service:)")
  final public func deleteAccount(email: Swift.String, password: Swift.String, edgeEngineIdToken: Swift.String, service: EdgeCore.EdgeClient.Service) async -> Swift.Result<EdgeCore.EdgeClient.Authorization, Foundation.NSError>
  public static func validateAccountDeletion(codes: EdgeCore.EdgeClient.Authorization.ValidationCodes, password: Swift.String, idToken: Swift.String, service: EdgeCore.EdgeClient.Service) async -> Swift.Result<EdgeCore.EdgeClient.Authorization, Foundation.NSError>
  @available(*, deprecated, renamed: "validateAccountDeletion(codes:password:idToken:service:)")
  final public func validateDeleteAccount(codes: EdgeCore.EdgeClient.Authorization.ValidationCodes, password: Swift.String, edgeEngineIdToken: Swift.String, service: EdgeCore.EdgeClient.Service) async -> Swift.Result<EdgeCore.EdgeClient.Authorization, Foundation.NSError>
  public static func completeAccountDeletion(authorization: EdgeCore.EdgeClient.Authorization, service: EdgeCore.EdgeClient.Service) async -> Swift.Result<SwiftyJSON.JSON, Foundation.NSError>
  @available(*, deprecated, renamed: "completeAccountDeletion(authorization:service:)")
  final public func executeDeleteAccount(authorization: EdgeCore.EdgeClient.Authorization, service: EdgeCore.EdgeClient.Service) async -> Swift.Result<SwiftyJSON.JSON, Foundation.NSError>
}
extension EdgeCore.EdgeClient {
  public static func accountInformation(service: EdgeCore.EdgeClient.Service, authorization: EdgeCore.EdgeClient.Authorization) async -> Swift.Result<EdgeCore.EdgeClient.AuthUser, Foundation.NSError>
  @available(*, deprecated, renamed: "accountInformation(service:authorization:)")
  final public func accountInformation(service: EdgeCore.EdgeClient.Service, authorization: EdgeCore.EdgeClient.Authorization) async -> Swift.Result<EdgeCore.EdgeClient.AuthUser, Foundation.NSError>
  public static func authenticationScopes(serverUrl: Foundation.URL) async -> Swift.Result<[Swift.String], Foundation.NSError>
  @available(*, deprecated, renamed: "authenticationScopes(serverUrl:)")
  final public func authenticationScopes(serverUrl: Foundation.URL) async -> Swift.Result<[Swift.String], Foundation.NSError>
}
extension EdgeCore.EdgeClient.Request {
  open class URLComponentsBuilder {
    public init()
    open func create() -> Foundation.URLComponents
    open func set(components: Foundation.URLComponents?) -> EdgeCore.EdgeClient.Request.URLComponentsBuilder
    open func set(scheme: Swift.String, host: Swift.String, port: Swift.Int, path: Swift.String) -> EdgeCore.EdgeClient.Request.URLComponentsBuilder
    open func set(scheme: Swift.String, host: Swift.String, port: Swift.Int) -> EdgeCore.EdgeClient.Request.URLComponentsBuilder
    open func set(scheme: Swift.String) -> EdgeCore.EdgeClient.Request.URLComponentsBuilder
    open func set(host: Swift.String) -> EdgeCore.EdgeClient.Request.URLComponentsBuilder
    open func set(port: Swift.Int) -> EdgeCore.EdgeClient.Request.URLComponentsBuilder
    open func set(path: Swift.String) -> EdgeCore.EdgeClient.Request.URLComponentsBuilder
    open func append(path: Swift.String) -> EdgeCore.EdgeClient.Request.URLComponentsBuilder
    public func set(queryItems: [Swift.String : Any]) -> EdgeCore.EdgeClient.Request.URLComponentsBuilder
    public func set(query: Swift.String) -> EdgeCore.EdgeClient.Request.URLComponentsBuilder
    public func set(user: Swift.String) -> EdgeCore.EdgeClient.Request.URLComponentsBuilder
    public func set(password: Swift.String) -> EdgeCore.EdgeClient.Request.URLComponentsBuilder
    public func set(fragment: Swift.String) -> EdgeCore.EdgeClient.Request.URLComponentsBuilder
    @objc deinit
  }
}
extension EdgeCore.EdgeClient.Microservice {
  public struct NewContainer : Swift.Codable, Swift.Sendable {
    public var name: Swift.String?
    public var image: Swift.String?
    public var env: [Swift.String : Swift.String]?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.EdgeClient.AI {
  public struct Model : Swift.Codable, Swift.Sendable, Swift.Hashable {
    public init(id: Swift.String? = nil, kind: EdgeCore.EdgeClient.AI.Model.Kind? = nil, object: EdgeCore.EdgeClient.AI.Model.Object? = nil, created: Swift.Int? = nil, ownedBy: Swift.String? = nil, readyToUse: Swift.Bool? = nil, totalSize: Swift.Double? = nil, mmprojTotalSize: Swift.Double? = nil, excludeFromBackup: Swift.Bool? = nil, url: Swift.String? = nil, mmprojUrl: Swift.String? = nil, modelChatHint: Swift.String? = nil, serviceType: Swift.String? = nil)
    public var id: Swift.String?
    public enum Object : Swift.String, Swift.Codable, Swift.Sendable, Swift.Hashable {
      case model
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public enum Kind : Swift.String, Swift.Codable, Swift.Sendable, Swift.Hashable {
      case llm
      case vlm
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public var kind: EdgeCore.EdgeClient.AI.Model.Kind?
    public var object: EdgeCore.EdgeClient.AI.Model.Object?
    public var created: Swift.Int?
    public var ownedBy: Swift.String?
    public var readyToUse: Swift.Bool?
    public var totalSize: Swift.Double?
    public var mmprojTotalSize: Swift.Double?
    public var excludeFromBackup: Swift.Bool?
    public var url: Swift.String?
    public var mmprojUrl: Swift.String?
    public var modelChatHint: Swift.String?
    public var serviceType: Swift.String?
    public struct DownloadProgress : Swift.Codable, Swift.Sendable, Swift.Hashable {
      public var totalSize: Swift.Double
      public var size: Swift.Double
      public static func == (a: EdgeCore.EdgeClient.AI.Model.DownloadProgress, b: EdgeCore.EdgeClient.AI.Model.DownloadProgress) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    @available(*, deprecated, message: "Deprecated. Use EdgeClient.AI.ServiceInterface instead.")
    public enum CompletionType : Swift.Codable, Swift.Sendable, Swift.Hashable {
      case content(EdgeCore.EdgeClient.AI.Model.Message)
      case modelLoading
      case modelReady
      case modelProcessing
      case streamDone(EdgeCore.EdgeClient.AI.Model.Usage?)
      case comment(Swift.String)
      case event(Swift.String)
      case id(Swift.String)
      case retry(Swift.String)
      case error(Swift.String, Swift.Int)
      public static func == (a: EdgeCore.EdgeClient.AI.Model.CompletionType, b: EdgeCore.EdgeClient.AI.Model.CompletionType) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public static func == (a: EdgeCore.EdgeClient.AI.Model, b: EdgeCore.EdgeClient.AI.Model) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.EdgeClient.Request {
  public static func exportVideo(session: AVFoundation.AVAssetExportSession, outputURL: Foundation.URL, outFileType: AVFoundation.AVFileType) async throws
  @available(*, deprecated, renamed: "exportVideo(session:outputURL:outFileType:)")
  public static func exportVideo(session: AVFoundation.AVAssetExportSession, outputURL: Foundation.URL, outFileType: AVFoundation.AVFileType) async -> Swift.Result<Swift.Void, Foundation.NSError>
}
extension EdgeCore.EdgeClient {
  public struct Request : Swift.Codable, Swift.Sendable {
    public static func authorizedRequest(url: Foundation.URL, method: Alamofire.HTTPMethod, authorization: EdgeCore.EdgeClient.Authorization?, httpHeaders: Alamofire.HTTPHeaders?, httpBody: Alamofire.Parameters?, contentType: Swift.String = "application/json") -> Foundation.URLRequest?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension EdgeCore.EdgeClient.AI.Model.DeleteModelResponse.Object : Swift.RawRepresentable {}
extension EdgeCore.EdgeClient.AI.Model.ModelsResponse.Object : Swift.RawRepresentable {}
extension EdgeCore.EdgeClient.Microservice.Container.State : Swift.Equatable {}
extension EdgeCore.EdgeClient.Microservice.Container.State : Swift.Hashable {}
extension EdgeCore.EdgeClient.Microservice.Container.State : Swift.RawRepresentable {}
extension EdgeCore.EdgeClient.AI.ServiceConfiguration.Kind : Swift.Equatable {}
extension EdgeCore.EdgeClient.AI.ServiceConfiguration.Kind : Swift.Hashable {}
extension EdgeCore.EdgeClient.AI.ServiceConfiguration.Kind : Swift.RawRepresentable {}
extension EdgeCore.EdgeClient.Microservice.Component : Swift.Equatable {}
extension EdgeCore.EdgeClient.Microservice.Component : Swift.Hashable {}
extension EdgeCore.EdgeClient.Microservice.Component : Swift.RawRepresentable {}
extension EdgeCore.EdgeClient.Service.VersionCheck.Result : Swift.Equatable {}
extension EdgeCore.EdgeClient.Service.VersionCheck.Result : Swift.Hashable {}
extension EdgeCore.EdgeClient.Service.VersionCheck.Result : Swift.RawRepresentable {}
extension EdgeCore.EdgeClient.AI.Model.CreateModelRequest.ChatTemplateHint : Swift.RawRepresentable {}
extension EdgeCore.EdgeClient.Log.Level : Swift.Equatable {}
extension EdgeCore.EdgeClient.Log.Level : Swift.Hashable {}
extension EdgeCore.EdgeClient.Log.Level : Swift.RawRepresentable {}
extension EdgeCore.EdgeClient.Log.Privacy : Swift.Equatable {}
extension EdgeCore.EdgeClient.Log.Privacy : Swift.Hashable {}
extension EdgeCore.EdgeClient.Log.Privacy : Swift.RawRepresentable {}
extension EdgeCore.EdgeClient.RuntimeParameters.LogLevel : Swift.Equatable {}
extension EdgeCore.EdgeClient.RuntimeParameters.LogLevel : Swift.Hashable {}
extension EdgeCore.EdgeClient.RuntimeParameters.LogLevel : Swift.RawRepresentable {}
extension EdgeCore.EdgeClient.RuntimeParameters.NodeInfoLevel : Swift.Equatable {}
extension EdgeCore.EdgeClient.RuntimeParameters.NodeInfoLevel : Swift.Hashable {}
extension EdgeCore.EdgeClient.RuntimeParameters.NodeInfoLevel : Swift.RawRepresentable {}
extension EdgeCore.EdgeClient.RuntimeParameters.LocalDiscovery : Swift.Equatable {}
extension EdgeCore.EdgeClient.RuntimeParameters.LocalDiscovery : Swift.Hashable {}
extension EdgeCore.EdgeClient.RuntimeParameters.LocalDiscovery : Swift.RawRepresentable {}
extension EdgeCore.EdgeClient.AI.Model.Object : Swift.RawRepresentable {}
extension EdgeCore.EdgeClient.AI.Model.Kind : Swift.RawRepresentable {}
